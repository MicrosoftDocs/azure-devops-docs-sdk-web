### YamlMime:UniversalReference
items:
  - uid: azure-devops-extension-api.Promise
    name: Promise
    fullName: Promise<R>
    children:
      - azure-devops-extension-api.Promise.all_10
      - azure-devops-extension-api.Promise.all_2
      - azure-devops-extension-api.Promise.all_5
      - azure-devops-extension-api.Promise.all_9
      - azure-devops-extension-api.Promise.all
      - azure-devops-extension-api.Promise.all_1
      - azure-devops-extension-api.Promise.all_7
      - azure-devops-extension-api.Promise.all_3
      - azure-devops-extension-api.Promise.all_4
      - azure-devops-extension-api.Promise.all_6
      - azure-devops-extension-api.Promise.all_8
      - azure-devops-extension-api.Promise.catch
      - azure-devops-extension-api.Promise.finally
      - azure-devops-extension-api.Promise.constructor
      - azure-devops-extension-api.Promise.race
      - azure-devops-extension-api.Promise.reject
      - azure-devops-extension-api.Promise.resolve
      - azure-devops-extension-api.Promise.resolve_1
      - azure-devops-extension-api.Promise.then
      - azure-devops-extension-api.Promise.then_1
    langs:
      - typeScript
    type: class
    summary: ''
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_10
    name: all(Array<TAll | Thenable<TAll>>)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<TAll>(values: Array<TAll | Thenable<TAll>>)'
      parameters:
        - id: values
          type:
            - Array<TAll | azure-devops-extension-api.Thenable<TAll>>
          description: ''
      return:
        type:
          - 'azure-devops-extension-api.Promise<TAll[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_2
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_5
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_9
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_1
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_7
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_3
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_4
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_6
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.all_8
    name: all(Object)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that fulfills when every item in the array fulfills, and
      rejects if (and when) any item rejects.

      the array passed to all can be a mixture of promise-like objects and other
      objects.

      The fulfillment value is an array (in order) of fulfillment values. The
      rejection value is the first rejection value.
    syntax:
      content: 'static function all<T1>(values: Object)'
      parameters:
        - id: values
          type:
            - Object
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<Object>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.catch
    name: 'catch((error: any) => U | Thenable<U>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Sugar for promise.then(undefined, onRejected)'
    syntax:
      content: 'function catch<U>(onRejected?: (error: any) => U | Thenable<U>)'
      parameters:
        - id: onRejected
          type:
            - '(error: any) => U | Thenable<U>'
          description: |
            called when/if "promise" rejects
          optional: true
      return:
        type:
          - azure-devops-extension-api.Promise<U>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.finally
    name: 'finally((callback: any) => U | Thenable<U>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      onSettled is invoked when/if the "promise" settles (either rejects or
      fulfills);
    syntax:
      content: 'function finally<U>(onFinally?: (callback: any) => U | Thenable<U>)'
      parameters:
        - id: onFinally
          type:
            - '(callback: any) => U | Thenable<U>'
          description: |
            called when/if "promise" settles
          optional: true
      return:
        type:
          - azure-devops-extension-api.Promise<U>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.constructor
    name: >-
      Promise((resolve: (value?: R | Thenable<R>) => void, reject: (error?: any)
      => void) => void)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >-
      If you call resolve in the body of the callback passed to the constructor,

      your promise is fulfilled with result object passed to resolve.

      If you call reject your promise is rejected with the object passed to
      resolve.

      For consistency and debugging (eg stack traces), obj should be an
      instanceof Error.

      Any errors thrown in the constructor callback will be implicitly passed to
      reject().
    syntax:
      content: >-
        new Promise(callback: (resolve: (value?: R | Thenable<R>) => void,
        reject: (error?: any) => void) => void)
      parameters:
        - id: callback
          type:
            - >-
              (resolve: (value?: R | Thenable<R>) => void, reject: (error?: any)
              => void) => void
          description: ''
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.race
    name: 'race(R | Thenable<R>[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a Promise that fulfills when any item fulfills, and rejects if any
      item rejects.
    syntax:
      content: 'static function race<R>(promises: R | Thenable<R>[])'
      parameters:
        - id: promises
          type:
            - 'R | azure-devops-extension-api.Thenable<R>[]'
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<R>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.reject
    name: reject(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Make a promise that rejects to obj. For consistency and debugging (eg
      stack traces), obj should be an instanceof Error
    syntax:
      content: 'static function reject<R>(error: any)'
      parameters:
        - id: error
          type:
            - any
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<R>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.resolve
    name: resolve()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Make a new promise from the thenable.
      A thenable is promise-like in as far as it has a "then" method.
    syntax:
      content: static function resolve()
      parameters: []
      return:
        type:
          - azure-devops-extension-api.Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.resolve_1
    name: resolve(R | Thenable<R>)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Make a new promise from the thenable.
      A thenable is promise-like in as far as it has a "then" method.
    syntax:
      content: 'static function resolve<R>(value: R | Thenable<R>)'
      parameters:
        - id: value
          type:
            - R | azure-devops-extension-api.Thenable<R>
          description: ''
      return:
        type:
          - azure-devops-extension-api.Promise<R>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.then
    name: 'then((value: R) => U | Thenable<U>, (error: any) => U | Thenable<U>)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      onFulfilled is called when/if "promise" resolves. onRejected is called
      when/if "promise" rejects.

      Both are optional, if either/both are omitted the next
      onFulfilled/onRejected in the chain is called.

      Both callbacks have a single parameter , the fulfillment value or
      rejection reason.

      "then" returns a new promise equivalent to the value you return from
      onFulfilled/onRejected after being passed through Promise.resolve.

      If an error is thrown in the callback, the returned promise rejects with
      that error.
    syntax:
      content: >-
        function then<U>(onFulfilled?: (value: R) => U | Thenable<U>,
        onRejected?: (error: any) => U | Thenable<U>)
      parameters:
        - id: onFulfilled
          type:
            - '(value: R) => U | Thenable<U>'
          description: called when/if "promise" resolves
          optional: true
        - id: onRejected
          type:
            - '(error: any) => U | Thenable<U>'
          description: |
            called when/if "promise" rejects
          optional: true
      return:
        type:
          - azure-devops-extension-api.Promise<U>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Promise.then_1
    name: 'then((value: R) => U | Thenable<U>, (error: any) => void)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      onFulfilled is called when/if "promise" resolves. onRejected is called
      when/if "promise" rejects.

      Both are optional, if either/both are omitted the next
      onFulfilled/onRejected in the chain is called.

      Both callbacks have a single parameter , the fulfillment value or
      rejection reason.

      "then" returns a new promise equivalent to the value you return from
      onFulfilled/onRejected after being passed through Promise.resolve.

      If an error is thrown in the callback, the returned promise rejects with
      that error.
    syntax:
      content: >-
        function then<U>(onFulfilled?: (value: R) => U | Thenable<U>,
        onRejected?: (error: any) => void)
      parameters:
        - id: onFulfilled
          type:
            - '(value: R) => U | Thenable<U>'
          description: ''
          optional: true
        - id: onRejected
          type:
            - '(error: any) => void'
          description: ''
          optional: true
      return:
        type:
          - azure-devops-extension-api.Promise<U>
    package: azure-devops-extension-api
references:
  - uid: azure-devops-extension-api.Promise<U>
    name: Promise<U>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: azure-devops-extension-api.Promise
      - name: <U>
        fullName: <U>
  - uid: azure-devops-extension-api.Promise<Object>
    name: Promise<Object>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: azure-devops-extension-api.Promise
      - name: <Object>
        fullName: <Object>
  - uid: Array<TAll | azure-devops-extension-api.Thenable<TAll>>
    name: Thenable<TAll>>
    spec.typeScript:
      - name: 'Array<TAll | '
        fullName: 'Array<TAll | '
      - name: Thenable
        fullName: Thenable
        uid: azure-devops-extension-api.Thenable
      - name: <TAll>>
        fullName: <TAll>>
  - uid: 'azure-devops-extension-api.Promise<TAll[]>'
    name: 'Promise<TAll[]>'
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: azure-devops-extension-api.Promise
      - name: '<TAll[]>'
        fullName: '<TAll[]>'
  - uid: 'R | azure-devops-extension-api.Thenable<R>[]'
    name: 'Thenable<R>[]'
    spec.typeScript:
      - name: 'R | '
        fullName: 'R | '
      - name: Thenable
        fullName: Thenable
        uid: azure-devops-extension-api.Thenable
      - name: '<R>[]'
        fullName: '<R>[]'
  - uid: azure-devops-extension-api.Promise<R>
    name: Promise<R>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: azure-devops-extension-api.Promise
      - name: <R>
        fullName: <R>
  - uid: azure-devops-extension-api.Promise<void>
    name: Promise<void>
    spec.typeScript:
      - name: Promise
        fullName: Promise
        uid: azure-devops-extension-api.Promise
      - name: <void>
        fullName: <void>
  - uid: R | azure-devops-extension-api.Thenable<R>
    name: Thenable<R>
    spec.typeScript:
      - name: 'R | '
        fullName: 'R | '
      - name: Thenable
        fullName: Thenable
        uid: azure-devops-extension-api.Thenable
      - name: <R>
        fullName: <R>

### YamlMime:UniversalReference
items:
  - uid: azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager
    name: IExtensionDataManager
    fullName: IExtensionDataManager
    children:
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.createDocument
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.deleteDocument
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getDocument
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getDocuments
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getValue
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.queryCollections
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.queryCollectionsByName
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.setDocument
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.setValue
      - >-
        azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.updateDocument
    langs:
      - typeScript
    type: interface
    summary: ''
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.createDocument
    name: 'createDocument(string, any, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a promise for creating a document in the provided collection
    syntax:
      content: >-
        function createDocument(collectionName: string, doc: any,
        documentOptions?: IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: doc
          type:
            - any
          description: The document to store
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.deleteDocument
    name: 'deleteDocument(string, string, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise for deleting the document at the provided scope,
      collection and id
    syntax:
      content: >-
        function deleteDocument(collectionName: string, id: string,
        documentOptions?: IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: id
          type:
            - string
          description: The id of the document in the collection
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getDocument
    name: 'getDocument(string, string, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise for getting a document with the provided id in the
      provided collection
    syntax:
      content: >-
        function getDocument(collectionName: string, id: string,
        documentOptions?: IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: id
          type:
            - string
          description: The id of the document in the collection
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getDocuments
    name: 'getDocuments(string, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise for getting all of the documents in the provided
      collection
    syntax:
      content: >-
        function getDocuments(collectionName: string, documentOptions?:
        IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - 'Promise<any[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.getValue
    name: 'getValue(string, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a promise for retrieving a setting at the provided key and scope
    syntax:
      content: 'function getValue<T>(key: string, documentOptions?: IDocumentOptions)'
      parameters:
        - id: key
          type:
            - string
          description: The key to retrieve a value for
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<T>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.queryCollections
    name: 'queryCollections(ExtensionDataCollection[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a promise for querying a set of collections
    syntax:
      content: 'function queryCollections(collections: ExtensionDataCollection[])'
      parameters:
        - id: collections
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection[]
          description: >
            The list of collections to query. Each collection will contain its
            collectionName, scopeType, and scopeValue
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection[]>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.queryCollectionsByName
    name: 'queryCollectionsByName(string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a promise for querying a set of collections
    syntax:
      content: 'function queryCollectionsByName(collectionNames: string[])'
      parameters:
        - id: collectionNames
          type:
            - 'string[]'
          description: ''
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection[]>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.setDocument
    name: 'setDocument(string, any, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Returns a promise for setting a document in the provided collection

      Creates the document if it does not exist, otherwise updates the existing
      document with the id provided
    syntax:
      content: >-
        function setDocument(collectionName: string, doc: any, documentOptions?:
        IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: doc
          type:
            - any
          description: The document to store
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.setValue
    name: 'setValue(string, T, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Returns a promise for saving a setting at the provided key and scope
    syntax:
      content: >-
        function setValue<T>(key: string, value: T, documentOptions?:
        IDocumentOptions)
      parameters:
        - id: key
          type:
            - string
          description: The key to save a value for
        - id: value
          type:
            - T
          description: The value to save
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<T>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager.updateDocument
    name: 'updateDocument(string, any, IDocumentOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Returns a promise for updating a document in the provided collection
      A document with the id provided must exist
    syntax:
      content: >-
        function updateDocument(collectionName: string, doc: any,
        documentOptions?: IDocumentOptions)
      parameters:
        - id: collectionName
          type:
            - string
          description: The name of the collection where the document lives
        - id: doc
          type:
            - any
          description: The document to store
        - id: documentOptions
          type:
            - >-
              azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
          description: |
            Extension document options, the default scope value is account-wide
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
references:
  - uid: azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
    name: IDocumentOptions
    spec.typeScript:
      - name: IDocumentOptions
        fullName: IDocumentOptions
        uid: azure-devops-extension-api.Common.CommonServices.d.IDocumentOptions
  - uid: >-
      azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection[]
    name: 'ExtensionDataCollection[]'
    spec.typeScript:
      - name: ExtensionDataCollection
        fullName: ExtensionDataCollection
        uid: >-
          azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection
      - name: '[]'
        fullName: '[]'
  - uid: >-
      Promise<azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection[]>
    name: 'ExtensionDataCollection[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ExtensionDataCollection
        fullName: ExtensionDataCollection
        uid: >-
          azure-devops-extension-api.Common.CommonServices.d.ExtensionDataCollection
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager>
    name: IExtensionDataManager>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IExtensionDataManager
        fullName: IExtensionDataManager
        uid: >-
          azure-devops-extension-api.Common.CommonServices.d.IExtensionDataManager
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Common.CommonServices.d.MessageBannerLevel
    name: MessageBannerLevel
    spec.typeScript:
      - name: MessageBannerLevel
        fullName: MessageBannerLevel
        uid: azure-devops-extension-api.Common.CommonServices.d.MessageBannerLevel
  - uid: 'azure-devops-extension-api.Common.CommonServices.d.IGlobalMessageLink[]'
    name: 'IGlobalMessageLink[]'
    spec.typeScript:
      - name: IGlobalMessageLink
        fullName: IGlobalMessageLink
        uid: azure-devops-extension-api.Common.CommonServices.d.IGlobalMessageLink
      - name: '[]'
        fullName: '[]'
  - uid: azure-devops-extension-api.Common.CommonServices.d.IGlobalMessageBanner
    name: IGlobalMessageBanner
    spec.typeScript:
      - name: IGlobalMessageBanner
        fullName: IGlobalMessageBanner
        uid: >-
          azure-devops-extension-api.Common.CommonServices.d.IGlobalMessageBanner
  - uid: azure-devops-extension-api.Common.CommonServices.d.TeamFoundationHostType
    name: TeamFoundationHostType
    spec.typeScript:
      - name: TeamFoundationHostType
        fullName: TeamFoundationHostType
        uid: >-
          azure-devops-extension-api.Common.CommonServices.d.TeamFoundationHostType
  - uid: azure-devops-extension-api.Common.CommonServices.d.IDialogOptions<boolean>
    name: IDialogOptions<boolean>
    spec.typeScript:
      - name: IDialogOptions
        fullName: IDialogOptions
        uid: azure-devops-extension-api.Common.CommonServices.d.IDialogOptions
      - name: <boolean>
        fullName: <boolean>
  - uid: azure-devops-extension-api.Common.CommonServices.d.PanelSize
    name: PanelSize
    spec.typeScript:
      - name: PanelSize
        fullName: PanelSize
        uid: azure-devops-extension-api.Common.CommonServices.d.PanelSize
  - uid: >-
      Promise<azure-devops-extension-api.Common.CommonServices.d.IProjectInfo |
      undefined>
    name: IProjectInfo | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IProjectInfo
        fullName: IProjectInfo
        uid: azure-devops-extension-api.Common.CommonServices.d.IProjectInfo
      - name: ' | undefined>'
        fullName: ' | undefined>'

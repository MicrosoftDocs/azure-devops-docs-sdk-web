### YamlMime:UniversalReference
items:
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient
    name: GitRestClient
    fullName: GitRestClient
    children:
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createAnnotatedTag
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createAttachment
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createCherryPick
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createComment
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createCommitStatus
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createFavorite
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createForkSyncRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createImportRequest
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createLike
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createMergeRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestIterationStatus
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestLabel
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestReviewer
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestReviewers
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestStatus
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPush
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.createRepository
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createRevert
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.createThread
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteAttachment
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteComment
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteLike
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestIterationStatus
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestLabels
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestReviewer
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestStatus
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRefFavorite
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRepository
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRepositoryFromRecycleBin
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAnnotatedTag
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachmentContent
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachments
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachmentZip
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlob
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobContent
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobsZip
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobZip
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranch
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranches
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranchStatsBatch
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getChanges
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPick
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPickForRefName
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPickRelationships
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getComment
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getComments
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommit
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommitDiffs
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommits
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommitsBatch
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getDeletedRepositories
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getFileDiffs
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForks
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForkSyncRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForkSyncRequests
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getImportRequest
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItem
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemContent
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItems
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemsBatch
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemText
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemZip
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getLikes
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getMergeBases
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getMergeRequest
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestById
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestCommits
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestConflict
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestConflicts
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIteration
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationChanges
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationCommits
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterations
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationStatus
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationStatuses
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestLabel
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestLabels
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestProperties
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestQuery
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestReviewer
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestReviewers
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequests
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestsByProject
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestStatus
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestStatuses
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestThread
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestWorkItemRefs
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPush
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPushCommits
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPushes
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRecycleBinRepositories
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefFavorite
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefFavorites
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefs
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepositories
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepository
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepositoryWithParent
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRevert
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRevertForRefName
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getStatuses
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getSuggestions
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getThreads
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getTree
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.getTreeZip
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.constructor
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.queryImportRequests
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.RESOURCE_AREA_ID
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.restoreRepositoryFromRecycleBin
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.sharePullRequest
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateComment
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateImportRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequest
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestConflict
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestConflicts
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestIterationStatuses
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestProperties
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestReviewers
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestStatuses
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRef
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRefs
      - >-
        azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRepository
      - azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateThread
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: azure-devops-extension-api.Common.RestClientBase.d.RestClientBase
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createAnnotatedTag
    name: 'createAnnotatedTag(GitAnnotatedTag, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create an annotated tag.
    syntax:
      content: >-
        function createAnnotatedTag(tagObject: GitAnnotatedTag, project: string,
        repositoryId: string)
      parameters:
        - id: tagObject
          type:
            - azure-devops-extension-api.Git.Git.d.GitAnnotatedTag
          description: Object containing details of tag to be created.
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            ID or name of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitAnnotatedTag>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createAttachment
    name: 'createAttachment(any, string, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Attach a new file to a pull request.
    syntax:
      content: >-
        function createAttachment(content: any, fileName: string, repositoryId:
        string, pullRequestId: number, project?: string)
      parameters:
        - id: content
          type:
            - any
          description: Content to upload
        - id: fileName
          type:
            - string
          description: The name of the file.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.Attachment>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createCherryPick
    name: 'createCherryPick(GitAsyncRefOperationParameters, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Cherry pick a specific commit or commits that are associated to a pull
      request into a new branch.
    syntax:
      content: >-
        function createCherryPick(cherryPickToCreate:
        GitAsyncRefOperationParameters, project: string, repositoryId: string)
      parameters:
        - id: cherryPickToCreate
          type:
            - >-
              azure-devops-extension-api.Git.Git.d.GitAsyncRefOperationParameters
          description: '-'
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCherryPick>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createComment
    name: 'createComment(Comment, string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a comment on a specific thread in a pull request (up to 500
      comments can be created per thread).
    syntax:
      content: >-
        function createComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, project?: string)
      parameters:
        - id: comment
          type:
            - azure-devops-extension-api.Git.Git.d.Comment
          description: 'The comment to create. Comments can be up to 150,000 characters.'
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread that the desired comment is in.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.Comment>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createCommitStatus
    name: 'createCommitStatus(GitStatus, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create Git commit status.
    syntax:
      content: >-
        function createCommitStatus(gitCommitStatusToCreate: GitStatus,
        commitId: string, repositoryId: string, project?: string)
      parameters:
        - id: gitCommitStatusToCreate
          type:
            - azure-devops-extension-api.Git.Git.d.GitStatus
          description: Git commit status object to create.
        - id: commitId
          type:
            - string
          description: ID of the Git commit.
        - id: repositoryId
          type:
            - string
          description: ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitStatus>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createFavorite
    name: 'createFavorite(GitRefFavorite, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Creates a ref favorite
    syntax:
      content: 'function createFavorite(favorite: GitRefFavorite, project: string)'
      parameters:
        - id: favorite
          type:
            - azure-devops-extension-api.Git.Git.d.GitRefFavorite
          description: The ref favorite to create.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRefFavorite>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createForkSyncRequest
    name: >-
      createForkSyncRequest(GitForkSyncRequestParameters, string, string,
      boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Request that another repository's refs be fetched into this one. It syncs
      two existing forks. To create a fork, please see the \<a
      href="https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1"\>
      repositories endpoint\</a\>
    syntax:
      content: >-
        function createForkSyncRequest(syncParams: GitForkSyncRequestParameters,
        repositoryNameOrId: string, project?: string, includeLinks?: boolean)
      parameters:
        - id: syncParams
          type:
            - azure-devops-extension-api.Git.Git.d.GitForkSyncRequestParameters
          description: Source repository and ref mapping.
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitForkSyncRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createImportRequest
    name: 'createImportRequest(GitImportRequest, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create an import request.
    syntax:
      content: >-
        function createImportRequest(importRequest: GitImportRequest, project:
        string, repositoryId: string)
      parameters:
        - id: importRequest
          type:
            - azure-devops-extension-api.Git.Git.d.GitImportRequest
          description: The import request to create.
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            The name or ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createLike
    name: 'createLike(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a like on a comment.
    syntax:
      content: >-
        function createLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type:
            - number
          description: The ID of the comment.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createMergeRequest
    name: 'createMergeRequest(GitMergeParameters, string, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Request a git merge operation. Currently we support merging only 2
      commits.
    syntax:
      content: >-
        function createMergeRequest(mergeParameters: GitMergeParameters,
        project: string, repositoryNameOrId: string, includeLinks?: boolean)
      parameters:
        - id: mergeParameters
          type:
            - azure-devops-extension-api.Git.Git.d.GitMergeParameters
          description: Parents commitIds and merge commit messsage.
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitMerge>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequest
    name: 'createPullRequest(GitPullRequest, string, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a pull request.
    syntax:
      content: >-
        function createPullRequest(gitPullRequestToCreate: GitPullRequest,
        repositoryId: string, project?: string, supportsIterations?: boolean)
      parameters:
        - id: gitPullRequestToCreate
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequest
          description: The pull request to create.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: supportsIterations
          type:
            - boolean
          description: >
            If true, subsequent pushes to the pull request will be individually
            reviewable. Set this to false for large pull requests for
            performance reasons if this functionality is not needed.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestIterationStatus
    name: >-
      createPullRequestIterationStatus(GitPullRequestStatus, string, number,
      number, string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a pull request status on the iteration. This operation will have
      the same result as Create status on pull request with specified iteration
      ID in the request body.
    syntax:
      content: >-
        function createPullRequestIterationStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, iterationId: number,
        project?: string)
      parameters:
        - id: status
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
          description: Pull request status to create.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestLabel
    name: >-
      createPullRequestLabel(WebApiCreateTagRequestData, string, number, string,
      string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create a label for a specified pull request. The only required field is
      the name of the new label.
    syntax:
      content: >-
        function createPullRequestLabel(label: WebApiCreateTagRequestData,
        repositoryId: string, pullRequestId: number, project?: string,
        projectId?: string)
      parameters:
        - id: label
          type:
            - azure-devops-extension-api.Core.Core.d.WebApiCreateTagRequestData
          description: Label to assign to the pull request.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: |
            Project ID or project name.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Core.Core.d.WebApiTagDefinition>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestReviewer
    name: >-
      createPullRequestReviewer(IdentityRefWithVote, string, number, string,
      string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Add a reviewer to a pull request or cast a vote.
    syntax:
      content: >-
        function createPullRequestReviewer(reviewer: IdentityRefWithVote,
        repositoryId: string, pullRequestId: number, reviewerId: string,
        project?: string)
      parameters:
        - id: reviewer
          type:
            - azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
          description: >-
            Reviewer's vote.\<br /\>If the reviewer's ID is included here, it
            must match the reviewerID parameter.\<br /\>Reviewers can set their
            own vote with this method.  When adding other reviewers, vote must
            be set to zero.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: reviewerId
          type:
            - string
          description: ID of the reviewer.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestReviewers
    name: 'createPullRequestReviewers(IdentityRef[], string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Add reviewers to a pull request.
    syntax:
      content: >-
        function createPullRequestReviewers(reviewers: IdentityRef[],
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: reviewers
          type:
            - 'azure-devops-extension-api.WebApi.WebApi.d.IdentityRef[]'
          description: Reviewers to add to the pull request.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPullRequestStatus
    name: 'createPullRequestStatus(GitPullRequestStatus, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a pull request status.
    syntax:
      content: >-
        function createPullRequestStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: status
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
          description: Pull request status to create.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createPush
    name: 'createPush(GitPush, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Push changes to the repository.
    syntax:
      content: >-
        function createPush(push: GitPush, repositoryId: string, project?:
        string)
      parameters:
        - id: push
          type:
            - azure-devops-extension-api.Git.Git.d.GitPush
          description: '-'
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPush>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createRepository
    name: 'createRepository(GitRepositoryCreateOptions, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a git repository in a team project.
    syntax:
      content: >-
        function createRepository(gitRepositoryToCreate:
        GitRepositoryCreateOptions, project?: string, sourceRef?: string)
      parameters:
        - id: gitRepositoryToCreate
          type:
            - azure-devops-extension-api.Git.Git.d.GitRepositoryCreateOptions
          description: >-
            Specify the repo name, team project and/or parent repository. Team
            project information can be ommitted from gitRepositoryToCreate if
            the request is project-scoped (i.e., includes project Id).
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: sourceRef
          type:
            - string
          description: |
            [optional] Specify the source refs to use while creating a fork repo
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createRevert
    name: 'createRevert(GitAsyncRefOperationParameters, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Starts the operation to create a new branch which reverts changes
      introduced by either a specific commit or commits that are associated to a
      pull request.
    syntax:
      content: >-
        function createRevert(revertToCreate: GitAsyncRefOperationParameters,
        project: string, repositoryId: string)
      parameters:
        - id: revertToCreate
          type:
            - >-
              azure-devops-extension-api.Git.Git.d.GitAsyncRefOperationParameters
          description: '-'
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRevert>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.createThread
    name: 'createThread(GitPullRequestCommentThread, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a thread in a pull request.
    syntax:
      content: >-
        function createThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: commentThread
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
          description: The thread to create. Thread must contain at least one comment.
        - id: repositoryId
          type:
            - string
          description: Repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteAttachment
    name: 'deleteAttachment(string, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a pull request attachment.
    syntax:
      content: >-
        function deleteAttachment(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      parameters:
        - id: fileName
          type:
            - string
          description: The name of the attachment to delete.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteComment
    name: 'deleteComment(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a comment associated with a specific thread in a pull request.
    syntax:
      content: >-
        function deleteComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type:
            - number
          description: ID of the comment.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteLike
    name: 'deleteLike(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a like on a comment.
    syntax:
      content: >-
        function deleteLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type:
            - number
          description: The ID of the comment.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestIterationStatus
    name: 'deletePullRequestIterationStatus(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete pull request iteration status.
    syntax:
      content: >-
        function deletePullRequestIterationStatus(repositoryId: string,
        pullRequestId: number, iterationId: number, statusId: number, project?:
        string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration.
        - id: statusId
          type:
            - number
          description: ID of the pull request status.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestLabels
    name: 'deletePullRequestLabels(string, number, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes a label from the set of those assigned to the pull request.
    syntax:
      content: >-
        function deletePullRequestLabels(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: labelIdOrName
          type:
            - string
          description: The name or ID of the label requested.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: |
            Project ID or project name.
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestReviewer
    name: 'deletePullRequestReviewer(string, number, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Remove a reviewer from a pull request.
    syntax:
      content: >-
        function deletePullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: reviewerId
          type:
            - string
          description: ID of the reviewer to remove.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.deletePullRequestStatus
    name: 'deletePullRequestStatus(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete pull request status.
    syntax:
      content: >-
        function deletePullRequestStatus(repositoryId: string, pullRequestId:
        number, statusId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: statusId
          type:
            - number
          description: ID of the pull request status.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRefFavorite
    name: 'deleteRefFavorite(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes the refs favorite specified
    syntax:
      content: 'function deleteRefFavorite(project: string, favoriteId: number)'
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: favoriteId
          type:
            - number
          description: |
            The Id of the ref favorite to delete.
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRepository
    name: 'deleteRepository(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete a git repository
    syntax:
      content: 'function deleteRepository(repositoryId: string, project?: string)'
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.deleteRepositoryFromRecycleBin
    name: 'deleteRepositoryFromRecycleBin(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Destroy (hard delete) a soft-deleted Git repository.
    syntax:
      content: >-
        function deleteRepositoryFromRecycleBin(project: string, repositoryId:
        string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            The ID of the repository.
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAnnotatedTag
    name: 'getAnnotatedTag(string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get an annotated tag.
    syntax:
      content: >-
        function getAnnotatedTag(project: string, repositoryId: string,
        objectId: string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: objectId
          type:
            - string
          description: |
            ObjectId (Sha1Id) of tag to get.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitAnnotatedTag>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachmentContent
    name: 'getAttachmentContent(string, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file content of a pull request attachment.
    syntax:
      content: >-
        function getAttachmentContent(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      parameters:
        - id: fileName
          type:
            - string
          description: The name of the attachment.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachments
    name: 'getAttachments(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a list of files attached to a given pull request.
    syntax:
      content: >-
        function getAttachments(repositoryId: string, pullRequestId: number,
        project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.Attachment[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getAttachmentZip
    name: 'getAttachmentZip(string, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file content of a pull request attachment.
    syntax:
      content: >-
        function getAttachmentZip(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string)
      parameters:
        - id: fileName
          type:
            - string
          description: The name of the attachment.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlob
    name: 'getBlob(string, string, string, boolean, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a single blob.
    syntax:
      content: >-
        function getBlob(repositoryId: string, sha1: string, project?: string,
        download?: boolean, fileName?: string, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: sha1
          type:
            - string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
          optional: true
        - id: fileName
          type:
            - string
          description: Provide a fileName to use for a download.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitBlobRef>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobContent
    name: 'getBlobContent(string, string, string, boolean, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a single blob.
    syntax:
      content: >-
        function getBlobContent(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: sha1
          type:
            - string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
          optional: true
        - id: fileName
          type:
            - string
          description: Provide a fileName to use for a download.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobsZip
    name: 'getBlobsZip(string[], string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets one or more blobs in a zip file download.
    syntax:
      content: >-
        function getBlobsZip(blobIds: string[], repositoryId: string, project?:
        string, filename?: string)
      parameters:
        - id: blobIds
          type:
            - 'string[]'
          description: Blob IDs (SHA1 hashes) to be returned in the zip file.
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filename
          type:
            - string
          description: |
            -
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBlobZip
    name: 'getBlobZip(string, string, string, boolean, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a single blob.
    syntax:
      content: >-
        function getBlobZip(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: sha1
          type:
            - string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: download
          type:
            - boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
          optional: true
        - id: fileName
          type:
            - string
          description: Provide a fileName to use for a download.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranch
    name: 'getBranch(string, string, string, GitVersionDescriptor)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve statistics about a single branch.
    syntax:
      content: >-
        function getBranch(repositoryId: string, name: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: name
          type:
            - string
          description: Name of the branch.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: baseVersionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: |
            Identifies the commit or branch to use as the base.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitBranchStats>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranches
    name: 'getBranches(string, string, GitVersionDescriptor)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve statistics about all branches within a repository.
    syntax:
      content: >-
        function getBranches(repositoryId: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: baseVersionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: |
            Identifies the commit or branch to use as the base.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitBranchStats[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getBranchStatsBatch
    name: 'getBranchStatsBatch(GitQueryBranchStatsCriteria, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getBranchStatsBatch(searchCriteria:
        GitQueryBranchStatsCriteria, repositoryId: string, project?: string)
      parameters:
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitQueryBranchStatsCriteria
          description: '-'
        - id: repositoryId
          type:
            - string
          description: '-'
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitBranchStats[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getChanges
    name: 'getChanges(string, string, string, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve changes for a particular commit.
    syntax:
      content: >-
        function getChanges(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number)
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of changes to return.
          optional: true
        - id: skip
          type:
            - number
          description: |
            The number of changes to skip.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCommitChanges>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPick
    name: 'getCherryPick(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve information about a cherry pick by cherry pick Id.
    syntax:
      content: >-
        function getCherryPick(project: string, cherryPickId: number,
        repositoryId: string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: cherryPickId
          type:
            - number
          description: ID of the cherry pick.
        - id: repositoryId
          type:
            - string
          description: |
            ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCherryPick>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPickForRefName
    name: 'getCherryPickForRefName(string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve information about a cherry pick for a specific branch.
    syntax:
      content: >-
        function getCherryPickForRefName(project: string, repositoryId: string,
        refName: string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ID of the repository.
        - id: refName
          type:
            - string
          description: >
            The GitAsyncRefOperationParameters generatedRefName used for the
            cherry pick operation.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCherryPick>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCherryPickRelationships
    name: 'getCherryPickRelationships(string, string, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Given a commitId, returns a list of commits that are in the same
      cherry-pick family.
    syntax:
      content: >-
        function getCherryPickRelationships(repositoryNameOrId: string,
        commitId: string, project?: string, includeLinks?: boolean)
      parameters:
        - id: repositoryNameOrId
          type:
            - string
          description: '-'
        - id: commitId
          type:
            - string
          description: '-'
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: |
            -
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getComment
    name: 'getComment(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a comment associated with a specific thread in a pull request.
    syntax:
      content: >-
        function getComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type:
            - number
          description: ID of the comment.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.Comment>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getComments
    name: 'getComments(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all comments associated with a specific thread in a pull request.
    syntax:
      content: >-
        function getComments(repositoryId: string, pullRequestId: number,
        threadId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.Comment[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommit
    name: 'getCommit(string, string, string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a particular commit.
    syntax:
      content: >-
        function getCommit(commitId: string, repositoryId: string, project?:
        string, changeCount?: number)
      parameters:
        - id: commitId
          type:
            - string
          description: The id of the commit.
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: changeCount
          type:
            - number
          description: |
            The number of changes to include in the result.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCommit>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommitDiffs
    name: >-
      getCommitDiffs(string, string, boolean, number, number,
      GitBaseVersionDescriptor, GitTargetVersionDescriptor)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Find the closest common commit (the merge base) between base and target
      commits, and get the diff between either the base and target commits or
      common and target commits.
    syntax:
      content: >-
        function getCommitDiffs(repositoryId: string, project?: string,
        diffCommonCommit?: boolean, top?: number, skip?: number,
        baseVersionDescriptor?: GitBaseVersionDescriptor,
        targetVersionDescriptor?: GitTargetVersionDescriptor)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: diffCommonCommit
          type:
            - boolean
          description: >-
            If true, diff between common and target commits. If false, diff
            between base and target commits.
          optional: true
        - id: top
          type:
            - number
          description: Maximum number of changes to return. Defaults to 100.
          optional: true
        - id: skip
          type:
            - number
          description: Number of changes to skip
          optional: true
        - id: baseVersionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitBaseVersionDescriptor
          description: Descriptor for base commit.
          optional: true
        - id: targetVersionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitTargetVersionDescriptor
          description: |
            Descriptor for target commit.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitCommitDiffs>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommits
    name: 'getCommits(string, GitQueryCommitsCriteria, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve git commits for a project
    syntax:
      content: >-
        function getCommits(repositoryId: string, searchCriteria:
        GitQueryCommitsCriteria, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitQueryCommitsCriteria
          description: '-'
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getCommitsBatch
    name: >-
      getCommitsBatch(GitQueryCommitsCriteria, string, string, number, number,
      boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve git commits for a project matching the search criteria
    syntax:
      content: >-
        function getCommitsBatch(searchCriteria: GitQueryCommitsCriteria,
        repositoryId: string, project?: string, skip?: number, top?: number,
        includeStatuses?: boolean)
      parameters:
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitQueryCommitsCriteria
          description: Search options
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: Number of commits to skip.
          optional: true
        - id: top
          type:
            - number
          description: Maximum number of commits to return.
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: |
            True to include additional commit status information.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getDeletedRepositories
    name: getDeletedRepositories(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve deleted git repositories.
    syntax:
      content: 'function getDeletedRepositories(project: string)'
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitDeletedRepository[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getFileDiffs
    name: 'getFileDiffs(FileDiffsCriteria, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the file diffs for each of the specified files
    syntax:
      content: >-
        function getFileDiffs(fileDiffsCriteria: FileDiffsCriteria, project:
        string, repositoryId: string)
      parameters:
        - id: fileDiffsCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.FileDiffsCriteria
          description: List of file parameters objects
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            The name or ID of the repository
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.FileDiff[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForks
    name: 'getForks(string, string, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all forks of a repository in the collection.
    syntax:
      content: >-
        function getForks(repositoryNameOrId: string, collectionId: string,
        project?: string, includeLinks?: boolean)
      parameters:
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: collectionId
          type:
            - string
          description: Team project collection ID.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitRepositoryRef[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForkSyncRequest
    name: 'getForkSyncRequest(string, number, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a specific fork sync operation's details.
    syntax:
      content: >-
        function getForkSyncRequest(repositoryNameOrId: string,
        forkSyncOperationId: number, project?: string, includeLinks?: boolean)
      parameters:
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: forkSyncOperationId
          type:
            - number
          description: OperationId of the sync request.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitForkSyncRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getForkSyncRequests
    name: 'getForkSyncRequests(string, string, boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all requested fork sync operations on this repository.
    syntax:
      content: >-
        function getForkSyncRequests(repositoryNameOrId: string, project?:
        string, includeAbandoned?: boolean, includeLinks?: boolean)
      parameters:
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeAbandoned
          type:
            - boolean
          description: True to include abandoned requests.
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitForkSyncRequest[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getImportRequest
    name: 'getImportRequest(string, string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a particular import request.
    syntax:
      content: >-
        function getImportRequest(project: string, repositoryId: string,
        importRequestId: number)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: importRequestId
          type:
            - number
          description: |
            The unique identifier for the import request.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItem
    name: >-
      getItem(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    syntax:
      content: >-
        function getItem(repositoryId: string, path: string, project?: string,
        scopePath?: string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor,
        includeContent?: boolean, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: path
          type:
            - string
          description: The item path.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: The path scope.  The default is null.
          optional: true
        - id: recursionLevel
          type:
            - azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: Set to true to include content metadata.  Default is false.
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: Set to true to include the lastest changes.  Default is false.
          optional: true
        - id: download
          type:
            - boolean
          description: Set to true to download the response as a file.  Default is false.
          optional: true
        - id: versionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: Version descriptor.  Default is null.
          optional: true
        - id: includeContent
          type:
            - boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitItem>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemContent
    name: >-
      getItemContent(string, string, string, string,
      VersionControlRecursionType, boolean, boolean, boolean,
      GitVersionDescriptor, boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    syntax:
      content: >-
        function getItemContent(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: path
          type:
            - string
          description: The item path.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: The path scope.  The default is null.
          optional: true
        - id: recursionLevel
          type:
            - azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: Set to true to include content metadata.  Default is false.
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: Set to true to include the lastest changes.  Default is false.
          optional: true
        - id: download
          type:
            - boolean
          description: Set to true to download the response as a file.  Default is false.
          optional: true
        - id: versionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: Version descriptor.  Default is null.
          optional: true
        - id: includeContent
          type:
            - boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItems
    name: >-
      getItems(string, string, string, VersionControlRecursionType, boolean,
      boolean, boolean, boolean, GitVersionDescriptor)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a collection of items. The download
      parameter is to indicate whether the content should be available as a
      download or just sent as a stream in the response. Doesn't apply to zipped
      content which is always returned as a download.
    syntax:
      content: >-
        function getItems(repositoryId: string, project?: string, scopePath?:
        string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, includeLinks?: boolean, versionDescriptor?:
        GitVersionDescriptor)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: The path scope.  The default is null.
          optional: true
        - id: recursionLevel
          type:
            - azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: Set to true to include content metadata.  Default is false.
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: Set to true to include the lastest changes.  Default is false.
          optional: true
        - id: download
          type:
            - boolean
          description: Set to true to download the response as a file.  Default is false.
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: Set to true to include links to items.  Default is false.
          optional: true
        - id: versionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: |
            Version descriptor.  Default is null.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitItem[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemsBatch
    name: 'getItemsBatch(GitItemRequestData, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Post for retrieving a creating a batch out of a set of items in a repo /
      project given a list of paths or a long path
    syntax:
      content: >-
        function getItemsBatch(requestData: GitItemRequestData, repositoryId:
        string, project?: string)
      parameters:
        - id: requestData
          type:
            - azure-devops-extension-api.Git.Git.d.GitItemRequestData
          description: >-
            Request data attributes: ItemDescriptors, IncludeContentMetadata,
            LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of
            items to fetch, including path, version, and recursion level.
            IncludeContentMetadata: Whether to include metadata for all items
            LatestProcessedChange: Whether to include shallow ref to commit that
            last changed each item. IncludeLinks: Whether to include the _links
            field on the shallow references.
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitItem[][]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemText
    name: >-
      getItemText(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    syntax:
      content: >-
        function getItemText(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: path
          type:
            - string
          description: The item path.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: The path scope.  The default is null.
          optional: true
        - id: recursionLevel
          type:
            - azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: Set to true to include content metadata.  Default is false.
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: Set to true to include the lastest changes.  Default is false.
          optional: true
        - id: download
          type:
            - boolean
          description: Set to true to download the response as a file.  Default is false.
          optional: true
        - id: versionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: Version descriptor.  Default is null.
          optional: true
        - id: includeContent
          type:
            - boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
          optional: true
      return:
        type:
          - Promise<string>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getItemZip
    name: >-
      getItemZip(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    syntax:
      content: >-
        function getItemZip(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: path
          type:
            - string
          description: The item path.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: scopePath
          type:
            - string
          description: The path scope.  The default is null.
          optional: true
        - id: recursionLevel
          type:
            - azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
          optional: true
        - id: includeContentMetadata
          type:
            - boolean
          description: Set to true to include content metadata.  Default is false.
          optional: true
        - id: latestProcessedChange
          type:
            - boolean
          description: Set to true to include the lastest changes.  Default is false.
          optional: true
        - id: download
          type:
            - boolean
          description: Set to true to download the response as a file.  Default is false.
          optional: true
        - id: versionDescriptor
          type:
            - azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
          description: Version descriptor.  Default is null.
          optional: true
        - id: includeContent
          type:
            - boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
          optional: true
        - id: resolveLfs
          type:
            - boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getLikes
    name: 'getLikes(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get likes for a comment.
    syntax:
      content: >-
        function getLikes(repositoryId: string, pullRequestId: number, threadId:
        number, commentId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type:
            - number
          description: The ID of the comment.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.WebApi.WebApi.d.IdentityRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getMergeBases
    name: 'getMergeBases(string, string, string, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Find the merge bases of two commits, optionally across forks. If
      otherRepositoryId is not specified, the merge bases will only be
      calculated within the context of the local repositoryNameOrId.
    syntax:
      content: >-
        function getMergeBases(repositoryNameOrId: string, commitId: string,
        otherCommitId: string, project?: string, otherCollectionId?: string,
        otherRepositoryId?: string)
      parameters:
        - id: repositoryNameOrId
          type:
            - string
          description: ID or name of the local repository.
        - id: commitId
          type:
            - string
          description: >-
            First commit, usually the tip of the target branch of the potential
            merge.
        - id: otherCommitId
          type:
            - string
          description: >-
            Other commit, usually the tip of the source branch of the potential
            merge.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: otherCollectionId
          type:
            - string
          description: The collection ID where otherCommitId lives.
          optional: true
        - id: otherRepositoryId
          type:
            - string
          description: |
            The repository ID where otherCommitId lives.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getMergeRequest
    name: 'getMergeRequest(string, string, number, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a specific merge operation's details.
    syntax:
      content: >-
        function getMergeRequest(project: string, repositoryNameOrId: string,
        mergeOperationId: number, includeLinks?: boolean)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryNameOrId
          type:
            - string
          description: The name or ID of the repository.
        - id: mergeOperationId
          type:
            - number
          description: OperationId of the merge request.
        - id: includeLinks
          type:
            - boolean
          description: |
            True to include links
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitMerge>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequest
    name: >-
      getPullRequest(string, number, string, number, number, number, boolean,
      boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a pull request.
    syntax:
      content: >-
        function getPullRequest(repositoryId: string, pullRequestId: number,
        project?: string, maxCommentLength?: number, skip?: number, top?:
        number, includeCommits?: boolean, includeWorkItemRefs?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: The ID of the pull request to retrieve.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: Not used.
          optional: true
        - id: skip
          type:
            - number
          description: Not used.
          optional: true
        - id: top
          type:
            - number
          description: Not used.
          optional: true
        - id: includeCommits
          type:
            - boolean
          description: >-
            If true, the pull request will be returned with the associated
            commits.
          optional: true
        - id: includeWorkItemRefs
          type:
            - boolean
          description: >
            If true, the pull request will be returned with the associated work
            item references.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestById
    name: 'getPullRequestById(number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a pull request.
    syntax:
      content: 'function getPullRequestById(pullRequestId: number, project?: string)'
      parameters:
        - id: pullRequestId
          type:
            - number
          description: The ID of the pull request to retrieve.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestCommits
    name: 'getPullRequestCommits(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the commits for the specified pull request.
    syntax:
      content: >-
        function getPullRequestCommits(repositoryId: string, pullRequestId:
        number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestConflict
    name: 'getPullRequestConflict(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve one conflict for a pull request by ID
    syntax:
      content: >-
        function getPullRequestConflict(repositoryId: string, pullRequestId:
        number, conflictId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: '-'
        - id: pullRequestId
          type:
            - number
          description: '-'
        - id: conflictId
          type:
            - number
          description: '-'
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitConflict>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestConflicts
    name: >-
      getPullRequestConflicts(string, number, string, number, number, boolean,
      boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all conflicts for a pull request
    syntax:
      content: >-
        function getPullRequestConflicts(repositoryId: string, pullRequestId:
        number, project?: string, skip?: number, top?: number, includeObsolete?:
        boolean, excludeResolved?: boolean, onlyResolved?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: '-'
        - id: pullRequestId
          type:
            - number
          description: '-'
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: '-'
          optional: true
        - id: top
          type:
            - number
          description: '-'
          optional: true
        - id: includeObsolete
          type:
            - boolean
          description: '-'
          optional: true
        - id: excludeResolved
          type:
            - boolean
          description: '-'
          optional: true
        - id: onlyResolved
          type:
            - boolean
          description: |
            -
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitConflict[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIteration
    name: 'getPullRequestIteration(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the specified iteration for a pull request.
    syntax:
      content: >-
        function getPullRequestIteration(repositoryId: string, pullRequestId:
        number, iterationId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration to return.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIteration>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationChanges
    name: >-
      getPullRequestIterationChanges(string, number, number, string, number,
      number, number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the changes made in a pull request between two iterations.
    syntax:
      content: >-
        function getPullRequestIterationChanges(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string, top?:
        number, skip?: number, compareTo?: number)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: >-
            ID of the pull request iteration. \<br /\> Iteration IDs are
            zero-based with zero indicating the common commit between the source
            and target branches. Iteration one is the head of the source branch
            at the time the pull request is created and subsequent iterations
            are created when there are pushes to the source branch.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: >-
            Optional. The number of changes to retrieve.  The default value is
            100 and the maximum value is 2000.
          optional: true
        - id: skip
          type:
            - number
          description: >-
            Optional. The number of changes to ignore.  For example, to retrieve
            changes 101-150, set top 50 and skip to 100.
          optional: true
        - id: compareTo
          type:
            - number
          description: >
            ID of the pull request iteration to compare against.  The default
            value is zero which indicates the comparison is made against the
            common commit between the source and target branches
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIterationChanges>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationCommits
    name: 'getPullRequestIterationCommits(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the commits for the specified iteration of a pull request.
    syntax:
      content: >-
        function getPullRequestIterationCommits(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the iteration from which to get the commits.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterations
    name: 'getPullRequestIterations(string, number, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get the list of iterations for the specified pull request.
    syntax:
      content: >-
        function getPullRequestIterations(repositoryId: string, pullRequestId:
        number, project?: string, includeCommits?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeCommits
          type:
            - boolean
          description: >
            If true, include the commits associated with each iteration in the
            response.
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIteration[]>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationStatus
    name: 'getPullRequestIterationStatus(string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the specific pull request iteration status by ID. The status ID is
      unique within the pull request across all iterations.
    syntax:
      content: >-
        function getPullRequestIterationStatus(repositoryId: string,
        pullRequestId: number, iterationId: number, statusId: number, project?:
        string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration.
        - id: statusId
          type:
            - number
          description: ID of the pull request status.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestIterationStatuses
    name: 'getPullRequestIterationStatuses(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the statuses associated with a pull request iteration.
    syntax:
      content: >-
        function getPullRequestIterationStatuses(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestLabel
    name: 'getPullRequestLabel(string, number, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a single label that has been assigned to a pull request.
    syntax:
      content: >-
        function getPullRequestLabel(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: labelIdOrName
          type:
            - string
          description: The name or ID of the label requested.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: |
            Project ID or project name.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Core.Core.d.WebApiTagDefinition>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestLabels
    name: 'getPullRequestLabels(string, number, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the labels assigned to a pull request.
    syntax:
      content: >-
        function getPullRequestLabels(repositoryId: string, pullRequestId:
        number, project?: string, projectId?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: |
            Project ID or project name.
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Core.Core.d.WebApiTagDefinition[]>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestProperties
    name: 'getPullRequestProperties(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get external properties of the pull request.
    syntax:
      content: >-
        function getPullRequestProperties(repositoryId: string, pullRequestId:
        number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestQuery
    name: 'getPullRequestQuery(GitPullRequestQuery, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This API is used to find what pull requests are related to a given
      commit.  It can be used to either find the pull request that created a
      particular merge commit or it can be used to find all pull requests that
      have ever merged a particular commit.  The input is a list of queries
      which each contain a list of commits. For each commit that you search
      against, you will get back a dictionary of commit -\> pull requests.
    syntax:
      content: >-
        function getPullRequestQuery(queries: GitPullRequestQuery, repositoryId:
        string, project?: string)
      parameters:
        - id: queries
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestQuery
          description: The list of queries to perform.
        - id: repositoryId
          type:
            - string
          description: ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestQuery>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestReviewer
    name: 'getPullRequestReviewer(string, number, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve information about a particular reviewer on a pull request
    syntax:
      content: >-
        function getPullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: reviewerId
          type:
            - string
          description: ID of the reviewer.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestReviewers
    name: 'getPullRequestReviewers(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the reviewers for a pull request
    syntax:
      content: >-
        function getPullRequestReviewers(repositoryId: string, pullRequestId:
        number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequests
    name: >-
      getPullRequests(string, GitPullRequestSearchCriteria, string, number,
      number, number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all pull requests matching a specified criteria.
    syntax:
      content: >-
        function getPullRequests(repositoryId: string, searchCriteria:
        GitPullRequestSearchCriteria, project?: string, maxCommentLength?:
        number, skip?: number, top?: number)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestSearchCriteria
          description: Pull requests will be returned that match this search criteria.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: maxCommentLength
          type:
            - number
          description: Not used.
          optional: true
        - id: skip
          type:
            - number
          description: >-
            The number of pull requests to ignore. For example, to retrieve
            results 101-150, set top to 50 and skip to 100.
          optional: true
        - id: top
          type:
            - number
          description: |
            The number of pull requests to retrieve.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestsByProject
    name: >-
      getPullRequestsByProject(string, GitPullRequestSearchCriteria, number,
      number, number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all pull requests matching a specified criteria.
    syntax:
      content: >-
        function getPullRequestsByProject(project: string, searchCriteria:
        GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
        top?: number)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestSearchCriteria
          description: Pull requests will be returned that match this search criteria.
        - id: maxCommentLength
          type:
            - number
          description: Not used.
          optional: true
        - id: skip
          type:
            - number
          description: >-
            The number of pull requests to ignore. For example, to retrieve
            results 101-150, set top to 50 and skip to 100.
          optional: true
        - id: top
          type:
            - number
          description: |
            The number of pull requests to retrieve.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestStatus
    name: 'getPullRequestStatus(string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get the specific pull request status by ID. The status ID is unique within
      the pull request across all iterations.
    syntax:
      content: >-
        function getPullRequestStatus(repositoryId: string, pullRequestId:
        number, statusId: number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: statusId
          type:
            - number
          description: ID of the pull request status.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestStatuses
    name: 'getPullRequestStatuses(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get all the statuses associated with a pull request.
    syntax:
      content: >-
        function getPullRequestStatuses(repositoryId: string, pullRequestId:
        number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestThread
    name: 'getPullRequestThread(string, number, number, string, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a thread in a pull request.
    syntax:
      content: >-
        function getPullRequestThread(repositoryId: string, pullRequestId:
        number, threadId: number, project?: string, iteration?: number,
        baseIteration?: number)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: iteration
          type:
            - number
          description: >-
            If specified, thread position will be tracked using this iteration
            as the right side of the diff.
          optional: true
        - id: baseIteration
          type:
            - number
          description: >
            If specified, thread position will be tracked using this iteration
            as the left side of the diff.
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPullRequestWorkItemRefs
    name: 'getPullRequestWorkItemRefs(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a list of work items associated with a pull request.
    syntax:
      content: >-
        function getPullRequestWorkItemRefs(repositoryId: string, pullRequestId:
        number, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID or name of the repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.WebApi.WebApi.d.ResourceRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPush
    name: 'getPush(string, number, string, number, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves a particular push.
    syntax:
      content: >-
        function getPush(repositoryId: string, pushId: number, project?: string,
        includeCommits?: number, includeRefUpdates?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: pushId
          type:
            - number
          description: ID of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeCommits
          type:
            - number
          description: The number of commits to include in the result.
          optional: true
        - id: includeRefUpdates
          type:
            - boolean
          description: |
            If true, include the list of refs that were updated by the push.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPush>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPushCommits
    name: 'getPushCommits(string, number, string, number, number, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a list of commits associated with a particular push.
    syntax:
      content: >-
        function getPushCommits(repositoryId: string, pushId: number, project?:
        string, top?: number, skip?: number, includeLinks?: boolean)
      parameters:
        - id: repositoryId
          type:
            - string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type:
            - number
          description: The id of the push.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: The maximum number of commits to return ("get the top x commits").
          optional: true
        - id: skip
          type:
            - number
          description: The number of commits to skip.
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: >
            Set to false to avoid including REST Url links for resources.
            Defaults to true.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getPushes
    name: 'getPushes(string, string, number, number, GitPushSearchCriteria)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieves pushes associated with the specified repository.
    syntax:
      content: >-
        function getPushes(repositoryId: string, project?: string, skip?:
        number, top?: number, searchCriteria?: GitPushSearchCriteria)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: skip
          type:
            - number
          description: Number of pushes to skip.
          optional: true
        - id: top
          type:
            - number
          description: Number of pushes to return.
          optional: true
        - id: searchCriteria
          type:
            - azure-devops-extension-api.Git.Git.d.GitPushSearchCriteria
          description: >
            Search criteria attributes: fromDate, toDate, pusherId, refName,
            includeRefUpdates or includeLinks. fromDate: Start date to search
            from. toDate: End date to search to. pusherId: Identity of the
            person who submitted the push. refName: Branch name to consider.
            includeRefUpdates: If true, include the list of refs that were
            updated by the push. includeLinks: Whether to include the _links
            field on the shallow references.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitPush[]>'
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRecycleBinRepositories
    name: getRecycleBinRepositories(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve soft-deleted git repositories from the recycle bin.
    syntax:
      content: 'function getRecycleBinRepositories(project: string)'
      parameters:
        - id: project
          type:
            - string
          description: |
            Project ID or project name
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitDeletedRepository[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefFavorite
    name: 'getRefFavorite(string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the refs favorite for a favorite Id.
    syntax:
      content: 'function getRefFavorite(project: string, favoriteId: number)'
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: favoriteId
          type:
            - number
          description: |
            The Id of the requested ref favorite.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRefFavorite>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefFavorites
    name: 'getRefFavorites(string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Gets the refs favorites for a repo and an identity.
    syntax:
      content: >-
        function getRefFavorites(project: string, repositoryId?: string,
        identityId?: string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: The id of the repository.
          optional: true
        - id: identityId
          type:
            - string
          description: >
            The id of the identity whose favorites are to be retrieved. If null,
            the requesting identity is used.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitRefFavorite[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRefs
    name: >-
      getRefs(string, string, string, boolean, boolean, boolean, boolean,
      boolean, string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Queries the provided repository for its refs and returns them.
    syntax:
      content: >-
        function getRefs(repositoryId: string, project?: string, filter?:
        string, includeLinks?: boolean, includeStatuses?: boolean,
        includeMyBranches?: boolean, latestStatusesOnly?: boolean, peelTags?:
        boolean, filterContains?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: filter
          type:
            - string
          description: '[optional] A filter to apply to the refs (starts with).'
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: >-
            [optional] Specifies if referenceLinks should be included in the
            result. default is false.
          optional: true
        - id: includeStatuses
          type:
            - boolean
          description: >-
            [optional] Includes up to the first 1000 commit statuses for each
            ref. The default value is false.
          optional: true
        - id: includeMyBranches
          type:
            - boolean
          description: >-
            [optional] Includes only branches that the user owns, the branches
            the user favorites, and the default branch. The default value is
            false. Cannot be combined with the filter parameter.
          optional: true
        - id: latestStatusesOnly
          type:
            - boolean
          description: >-
            [optional] True to include only the tip commit status for each ref.
            This option requires \`includeStatuses\` to be true. The default
            value is false.
          optional: true
        - id: peelTags
          type:
            - boolean
          description: >-
            [optional] Annotated tags will populate the PeeledObjectId property.
            default is false.
          optional: true
        - id: filterContains
          type:
            - string
          description: |
            [optional] A filter to apply to the refs (contains).
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitRef[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepositories
    name: 'getRepositories(string, boolean, boolean, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve git repositories.
    syntax:
      content: >-
        function getRepositories(project?: string, includeLinks?: boolean,
        includeAllUrls?: boolean, includeHidden?: boolean)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: includeLinks
          type:
            - boolean
          description: >-
            [optional] True to include reference links. The default value is
            false.
          optional: true
        - id: includeAllUrls
          type:
            - boolean
          description: >-
            [optional] True to include all remote URLs. The default value is
            false.
          optional: true
        - id: includeHidden
          type:
            - boolean
          description: >
            [optional] True to include hidden repositories. The default value is
            false.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitRepository[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepository
    name: 'getRepository(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a git repository.
    syntax:
      content: 'function getRepository(repositoryId: string, project?: string)'
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRepositoryWithParent
    name: 'getRepositoryWithParent(string, boolean, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve a git repository.
    syntax:
      content: >-
        function getRepositoryWithParent(repositoryId: string, includeParent:
        boolean, project?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: includeParent
          type:
            - boolean
          description: >-
            True to include parent repository. Only available in authenticated
            calls.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRevert
    name: 'getRevert(string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve information about a revert operation by revert Id.
    syntax:
      content: >-
        function getRevert(project: string, revertId: number, repositoryId:
        string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: revertId
          type:
            - number
          description: ID of the revert operation.
        - id: repositoryId
          type:
            - string
          description: |
            ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRevert>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.getRevertForRefName
    name: 'getRevertForRefName(string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve information about a revert operation for a specific branch.
    syntax:
      content: >-
        function getRevertForRefName(project: string, repositoryId: string,
        refName: string)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: ID of the repository.
        - id: refName
          type:
            - string
          description: >
            The GitAsyncRefOperationParameters generatedRefName used for the
            revert operation.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRevert>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getStatuses
    name: 'getStatuses(string, string, string, number, number, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get statuses associated with the Git commit.
    syntax:
      content: >-
        function getStatuses(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number, latestOnly?: boolean)
      parameters:
        - id: commitId
          type:
            - string
          description: ID of the Git commit.
        - id: repositoryId
          type:
            - string
          description: ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: top
          type:
            - number
          description: Optional. The number of statuses to retrieve. Default is 1000.
          optional: true
        - id: skip
          type:
            - number
          description: >-
            Optional. The number of statuses to ignore. Default is 0. For
            example, to retrieve results 101-150, set top to 50 and skip to 100.
          optional: true
        - id: latestOnly
          type:
            - boolean
          description: >
            The flag indicates whether to get only latest statuses grouped by
            \`Context.Name\` and \`Context.Genre\`.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitStatus[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getSuggestions
    name: 'getSuggestions(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve a pull request suggestion for a particular repository or team
      project.
    syntax:
      content: 'function getSuggestions(repositoryId: string, project?: string)'
      parameters:
        - id: repositoryId
          type:
            - string
          description: ID of the git repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitSuggestion[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getThreads
    name: 'getThreads(string, number, string, number, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve all threads in a pull request.
    syntax:
      content: >-
        function getThreads(repositoryId: string, pullRequestId: number,
        project?: string, iteration?: number, baseIteration?: number)
      parameters:
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: iteration
          type:
            - number
          description: >-
            If specified, thread positions will be tracked using this iteration
            as the right side of the diff.
          optional: true
        - id: baseIteration
          type:
            - number
          description: >
            If specified, thread positions will be tracked using this iteration
            as the left side of the diff.
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread[]>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getTree
    name: 'getTree(string, string, string, string, boolean, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Tree endpoint returns the collection of objects underneath the
      specified tree. Trees are folders in a Git repository.
    syntax:
      content: >-
        function getTree(repositoryId: string, sha1: string, project?: string,
        projectId?: string, recursive?: boolean, fileName?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: Repository Id.
        - id: sha1
          type:
            - string
          description: SHA1 hash of the tree object.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: Project Id.
          optional: true
        - id: recursive
          type:
            - boolean
          description: >-
            Search recursively. Include trees underneath this tree. Default is
            false.
          optional: true
        - id: fileName
          type:
            - string
          description: |
            Name to use if a .zip file is returned. Default is the object ID.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitTreeRef>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.getTreeZip
    name: 'getTreeZip(string, string, string, string, boolean, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Tree endpoint returns the collection of objects underneath the
      specified tree. Trees are folders in a Git repository.
    syntax:
      content: >-
        function getTreeZip(repositoryId: string, sha1: string, project?:
        string, projectId?: string, recursive?: boolean, fileName?: string)
      parameters:
        - id: repositoryId
          type:
            - string
          description: Repository Id.
        - id: sha1
          type:
            - string
          description: SHA1 hash of the tree object.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: Project Id.
          optional: true
        - id: recursive
          type:
            - boolean
          description: >-
            Search recursively. Include trees underneath this tree. Default is
            false.
          optional: true
        - id: fileName
          type:
            - string
          description: |
            Name to use if a .zip file is returned. Default is the object ID.
          optional: true
      return:
        type:
          - Promise<ArrayBuffer>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.constructor
    name: GitRestClient(IVssRestClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new GitRestClient(options: IVssRestClientOptions)'
      parameters:
        - id: options
          type:
            - azure-devops-extension-api.Common.Context.d.IVssRestClientOptions
          description: ''
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.queryImportRequests
    name: 'queryImportRequests(string, string, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve import requests for a repository.
    syntax:
      content: >-
        function queryImportRequests(project: string, repositoryId: string,
        includeAbandoned?: boolean)
      parameters:
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: includeAbandoned
          type:
            - boolean
          description: |
            True to include abandoned import requests in the results.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.RESOURCE_AREA_ID
    name: RESOURCE_AREA_ID
    fullName: RESOURCE_AREA_ID
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RESOURCE_AREA_ID: string'
      return:
        type:
          - string
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.restoreRepositoryFromRecycleBin
    name: >-
      restoreRepositoryFromRecycleBin(GitRecycleBinRepositoryDetails, string,
      string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Recover a soft-deleted Git repository. Recently deleted repositories go
      into a soft-delete state for a period of time before they are hard deleted
      and become unrecoverable.
    syntax:
      content: >-
        function restoreRepositoryFromRecycleBin(repositoryDetails:
        GitRecycleBinRepositoryDetails, project: string, repositoryId: string)
      parameters:
        - id: repositoryDetails
          type:
            - >-
              azure-devops-extension-api.Git.Git.d.GitRecycleBinRepositoryDetails
          description: '-'
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: |
            The ID of the repository.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.sharePullRequest
    name: 'sharePullRequest(ShareNotificationContext, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Sends an e-mail notification about a specific pull request to a set of
      recipients
    syntax:
      content: >-
        function sharePullRequest(userMessage: ShareNotificationContext,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: userMessage
          type:
            - azure-devops-extension-api.Git.Git.d.ShareNotificationContext
          description: '-'
        - id: repositoryId
          type:
            - string
          description: ID of the git repository.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateComment
    name: 'updateComment(Comment, string, number, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a comment associated with a specific thread in a pull request.
    syntax:
      content: >-
        function updateComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, commentId: number, project?:
        string)
      parameters:
        - id: comment
          type:
            - azure-devops-extension-api.Git.Git.d.Comment
          description: >-
            The comment content that should be updated. Comments can be up to
            150,000 characters.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type:
            - number
          description: ID of the comment to update.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.Comment>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateImportRequest
    name: 'updateImportRequest(GitImportRequest, string, string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Retry or abandon a failed import request.
    syntax:
      content: >-
        function updateImportRequest(importRequestToUpdate: GitImportRequest,
        project: string, repositoryId: string, importRequestId: number)
      parameters:
        - id: importRequestToUpdate
          type:
            - azure-devops-extension-api.Git.Git.d.GitImportRequest
          description: >-
            The updated version of the import request. Currently, the only
            change allowed is setting the Status to Queued or Abandoned.
        - id: project
          type:
            - string
          description: Project ID or project name
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: importRequestId
          type:
            - number
          description: |
            The unique identifier for the import request to update.
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequest
    name: 'updatePullRequest(GitPullRequest, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a pull request
    syntax:
      content: >-
        function updatePullRequest(gitPullRequestToUpdate: GitPullRequest,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: gitPullRequestToUpdate
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequest
          description: The pull request content that should be updated.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request to update.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestConflict
    name: 'updatePullRequestConflict(GitConflict, string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update merge conflict resolution
    syntax:
      content: >-
        function updatePullRequestConflict(conflict: GitConflict, repositoryId:
        string, pullRequestId: number, conflictId: number, project?: string)
      parameters:
        - id: conflict
          type:
            - azure-devops-extension-api.Git.Git.d.GitConflict
          description: '-'
        - id: repositoryId
          type:
            - string
          description: '-'
        - id: pullRequestId
          type:
            - number
          description: '-'
        - id: conflictId
          type:
            - number
          description: '-'
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitConflict>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestConflicts
    name: 'updatePullRequestConflicts(GitConflict[], string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update multiple merge conflict resolutions
    syntax:
      content: >-
        function updatePullRequestConflicts(conflictUpdates: GitConflict[],
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: conflictUpdates
          type:
            - 'azure-devops-extension-api.Git.Git.d.GitConflict[]'
          description: '-'
        - id: repositoryId
          type:
            - string
          description: '-'
        - id: pullRequestId
          type:
            - number
          description: '-'
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitConflictUpdateResult[]>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestIterationStatuses
    name: >-
      updatePullRequestIterationStatuses(JsonPatchDocument, string, number,
      number, string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update pull request iteration statuses collection. The only supported
      operation type is \`remove\`.
    syntax:
      content: >-
        function updatePullRequestIterationStatuses(patchDocument:
        JsonPatchDocument, repositoryId: string, pullRequestId: number,
        iterationId: number, project?: string)
      parameters:
        - id: patchDocument
          type:
            - azure-devops-extension-api.WebApi.WebApi.d.JsonPatchDocument
          description: >-
            Operations to apply to the pull request statuses in JSON Patch
            format.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: iterationId
          type:
            - number
          description: ID of the pull request iteration.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestProperties
    name: 'updatePullRequestProperties(JsonPatchDocument, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Create or update pull request external properties. The patch operation can
      be \`add\`, \`replace\` or \`remove\`. For \`add\` operation, the path can
      be empty. If the path is empty, the value must be a list of key value
      pairs. For \`replace\` operation, the path cannot be empty. If the path
      does not exist, the property will be added to the collection. For
      \`remove\` operation, the path cannot be empty. If the path does not
      exist, no action will be performed.
    syntax:
      content: >-
        function updatePullRequestProperties(patchDocument: JsonPatchDocument,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: patchDocument
          type:
            - azure-devops-extension-api.WebApi.WebApi.d.JsonPatchDocument
          description: 'Properties to add, replace or remove in JSON Patch format.'
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<any>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestReviewers
    name: 'updatePullRequestReviewers(IdentityRefWithVote[], string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reset the votes of multiple reviewers on a pull request.  NOTE: This
      endpoint only supports updating votes, but does not support updating
      required reviewers (use policy) or display names.
    syntax:
      content: >-
        function updatePullRequestReviewers(patchVotes: IdentityRefWithVote[],
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: patchVotes
          type:
            - 'azure-devops-extension-api.Git.Git.d.IdentityRefWithVote[]'
          description: IDs of the reviewers whose votes will be reset to zero
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: >-
      azure-devops-extension-api.Git.GitClient.d.GitRestClient.updatePullRequestStatuses
    name: 'updatePullRequestStatuses(JsonPatchDocument, string, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Update pull request statuses collection. The only supported operation type
      is \`remove\`.
    syntax:
      content: >-
        function updatePullRequestStatuses(patchDocument: JsonPatchDocument,
        repositoryId: string, pullRequestId: number, project?: string)
      parameters:
        - id: patchDocument
          type:
            - azure-devops-extension-api.WebApi.WebApi.d.JsonPatchDocument
          description: >-
            Operations to apply to the pull request statuses in JSON Patch
            format.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request’s target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRef
    name: 'updateRef(GitRefUpdate, string, string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Lock or Unlock a branch.
    syntax:
      content: >-
        function updateRef(newRefInfo: GitRefUpdate, repositoryId: string,
        filter: string, project?: string, projectId?: string)
      parameters:
        - id: newRefInfo
          type:
            - azure-devops-extension-api.Git.Git.d.GitRefUpdate
          description: The ref update action (lock/unlock) to perform
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: filter
          type:
            - string
          description: The name of the branch to lock/unlock
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: >
            ID or name of the team project. Optional if specifying an ID for
            repository.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRef>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRefs
    name: 'updateRefs(GitRefUpdate[], string, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Creating, updating, or deleting refs(branches).'
    syntax:
      content: >-
        function updateRefs(refUpdates: GitRefUpdate[], repositoryId: string,
        project?: string, projectId?: string)
      parameters:
        - id: refUpdates
          type:
            - 'azure-devops-extension-api.Git.Git.d.GitRefUpdate[]'
          description: List of ref updates to attempt to perform
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: Project ID or project name
          optional: true
        - id: projectId
          type:
            - string
          description: >
            ID or name of the team project. Optional if specifying an ID for
            repository.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.Git.Git.d.GitRefUpdateResult[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateRepository
    name: 'updateRepository(GitRepository, string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Updates the Git repository with either a new repo name or a new default
      branch.
    syntax:
      content: >-
        function updateRepository(newRepositoryInfo: GitRepository,
        repositoryId: string, project?: string)
      parameters:
        - id: newRepositoryInfo
          type:
            - azure-devops-extension-api.Git.Git.d.GitRepository
          description: Specify a new repo name or a new default branch of the repository
        - id: repositoryId
          type:
            - string
          description: The name or ID of the repository.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.Git.GitClient.d.GitRestClient.updateThread
    name: 'updateThread(GitPullRequestCommentThread, string, number, number, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update a thread in a pull request.
    syntax:
      content: >-
        function updateThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, threadId: number, project?:
        string)
      parameters:
        - id: commentThread
          type:
            - azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
          description: The thread content that should be updated.
        - id: repositoryId
          type:
            - string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type:
            - number
          description: ID of the pull request.
        - id: threadId
          type:
            - number
          description: ID of the thread to update.
        - id: project
          type:
            - string
          description: |
            Project ID or project name
          optional: true
      return:
        type:
          - >-
            Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread>
    package: azure-devops-extension-api
references:
  - uid: azure-devops-extension-api.Common.RestClientBase.d.RestClientBase
    name: RestClientBase
    spec.typeScript:
      - name: RestClientBase
        fullName: RestClientBase
        uid: azure-devops-extension-api.Common.RestClientBase.d.RestClientBase
  - uid: azure-devops-extension-api.Common.Context.d.IVssRestClientOptions
    name: IVssRestClientOptions
    spec.typeScript:
      - name: IVssRestClientOptions
        fullName: IVssRestClientOptions
        uid: azure-devops-extension-api.Common.Context.d.IVssRestClientOptions
  - uid: azure-devops-extension-api.Git.Git.d.GitAnnotatedTag
    name: GitAnnotatedTag
    spec.typeScript:
      - name: GitAnnotatedTag
        fullName: GitAnnotatedTag
        uid: azure-devops-extension-api.Git.Git.d.GitAnnotatedTag
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitAnnotatedTag>
    name: GitAnnotatedTag>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitAnnotatedTag
        fullName: GitAnnotatedTag
        uid: azure-devops-extension-api.Git.Git.d.GitAnnotatedTag
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.Attachment>
    name: Attachment>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Attachment
        fullName: Attachment
        uid: azure-devops-extension-api.Git.Git.d.Attachment
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitAsyncRefOperationParameters
    name: GitAsyncRefOperationParameters
    spec.typeScript:
      - name: GitAsyncRefOperationParameters
        fullName: GitAsyncRefOperationParameters
        uid: azure-devops-extension-api.Git.Git.d.GitAsyncRefOperationParameters
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitCherryPick>
    name: GitCherryPick>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitCherryPick
        fullName: GitCherryPick
        uid: azure-devops-extension-api.Git.Git.d.GitCherryPick
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.Comment
    name: Comment
    spec.typeScript:
      - name: Comment
        fullName: Comment
        uid: azure-devops-extension-api.Git.Git.d.Comment
  - uid: Promise<azure-devops-extension-api.Git.Git.d.Comment>
    name: Comment>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Comment
        fullName: Comment
        uid: azure-devops-extension-api.Git.Git.d.Comment
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitStatus
    name: GitStatus
    spec.typeScript:
      - name: GitStatus
        fullName: GitStatus
        uid: azure-devops-extension-api.Git.Git.d.GitStatus
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitStatus>
    name: GitStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitStatus
        fullName: GitStatus
        uid: azure-devops-extension-api.Git.Git.d.GitStatus
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitRefFavorite
    name: GitRefFavorite
    spec.typeScript:
      - name: GitRefFavorite
        fullName: GitRefFavorite
        uid: azure-devops-extension-api.Git.Git.d.GitRefFavorite
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitRefFavorite>
    name: GitRefFavorite>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRefFavorite
        fullName: GitRefFavorite
        uid: azure-devops-extension-api.Git.Git.d.GitRefFavorite
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitForkSyncRequestParameters
    name: GitForkSyncRequestParameters
    spec.typeScript:
      - name: GitForkSyncRequestParameters
        fullName: GitForkSyncRequestParameters
        uid: azure-devops-extension-api.Git.Git.d.GitForkSyncRequestParameters
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitForkSyncRequest>
    name: GitForkSyncRequest>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitForkSyncRequest
        fullName: GitForkSyncRequest
        uid: azure-devops-extension-api.Git.Git.d.GitForkSyncRequest
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitImportRequest
    name: GitImportRequest
    spec.typeScript:
      - name: GitImportRequest
        fullName: GitImportRequest
        uid: azure-devops-extension-api.Git.Git.d.GitImportRequest
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest>
    name: GitImportRequest>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitImportRequest
        fullName: GitImportRequest
        uid: azure-devops-extension-api.Git.Git.d.GitImportRequest
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitMergeParameters
    name: GitMergeParameters
    spec.typeScript:
      - name: GitMergeParameters
        fullName: GitMergeParameters
        uid: azure-devops-extension-api.Git.Git.d.GitMergeParameters
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitMerge>
    name: GitMerge>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitMerge
        fullName: GitMerge
        uid: azure-devops-extension-api.Git.Git.d.GitMerge
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPullRequest
    name: GitPullRequest
    spec.typeScript:
      - name: GitPullRequest
        fullName: GitPullRequest
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequest
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest>
    name: GitPullRequest>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequest
        fullName: GitPullRequest
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequest
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
    name: GitPullRequestStatus
    spec.typeScript:
      - name: GitPullRequestStatus
        fullName: GitPullRequestStatus
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus>
    name: GitPullRequestStatus>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestStatus
        fullName: GitPullRequestStatus
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Core.Core.d.WebApiCreateTagRequestData
    name: WebApiCreateTagRequestData
    spec.typeScript:
      - name: WebApiCreateTagRequestData
        fullName: WebApiCreateTagRequestData
        uid: azure-devops-extension-api.Core.Core.d.WebApiCreateTagRequestData
  - uid: Promise<azure-devops-extension-api.Core.Core.d.WebApiTagDefinition>
    name: WebApiTagDefinition>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WebApiTagDefinition
        fullName: WebApiTagDefinition
        uid: azure-devops-extension-api.Core.Core.d.WebApiTagDefinition
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
    name: IdentityRefWithVote
    spec.typeScript:
      - name: IdentityRefWithVote
        fullName: IdentityRefWithVote
        uid: azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
  - uid: Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote>
    name: IdentityRefWithVote>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IdentityRefWithVote
        fullName: IdentityRefWithVote
        uid: azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
      - name: '>'
        fullName: '>'
  - uid: 'azure-devops-extension-api.WebApi.WebApi.d.IdentityRef[]'
    name: 'IdentityRef[]'
    spec.typeScript:
      - name: IdentityRef
        fullName: IdentityRef
        uid: azure-devops-extension-api.WebApi.WebApi.d.IdentityRef
      - name: '[]'
        fullName: '[]'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.IdentityRefWithVote[]>'
    name: 'IdentityRefWithVote[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IdentityRefWithVote
        fullName: IdentityRefWithVote
        uid: azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPush
    name: GitPush
    spec.typeScript:
      - name: GitPush
        fullName: GitPush
        uid: azure-devops-extension-api.Git.Git.d.GitPush
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPush>
    name: GitPush>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPush
        fullName: GitPush
        uid: azure-devops-extension-api.Git.Git.d.GitPush
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitRepositoryCreateOptions
    name: GitRepositoryCreateOptions
    spec.typeScript:
      - name: GitRepositoryCreateOptions
        fullName: GitRepositoryCreateOptions
        uid: azure-devops-extension-api.Git.Git.d.GitRepositoryCreateOptions
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitRepository>
    name: GitRepository>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRepository
        fullName: GitRepository
        uid: azure-devops-extension-api.Git.Git.d.GitRepository
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitRevert>
    name: GitRevert>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRevert
        fullName: GitRevert
        uid: azure-devops-extension-api.Git.Git.d.GitRevert
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
    name: GitPullRequestCommentThread
    spec.typeScript:
      - name: GitPullRequestCommentThread
        fullName: GitPullRequestCommentThread
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread>
    name: GitPullRequestCommentThread>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestCommentThread
        fullName: GitPullRequestCommentThread
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.Attachment[]>'
    name: 'Attachment[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Attachment
        fullName: Attachment
        uid: azure-devops-extension-api.Git.Git.d.Attachment
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitBlobRef>
    name: GitBlobRef>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitBlobRef
        fullName: GitBlobRef
        uid: azure-devops-extension-api.Git.Git.d.GitBlobRef
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
    name: GitVersionDescriptor
    spec.typeScript:
      - name: GitVersionDescriptor
        fullName: GitVersionDescriptor
        uid: azure-devops-extension-api.Git.Git.d.GitVersionDescriptor
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitBranchStats>
    name: GitBranchStats>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitBranchStats
        fullName: GitBranchStats
        uid: azure-devops-extension-api.Git.Git.d.GitBranchStats
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitQueryBranchStatsCriteria
    name: GitQueryBranchStatsCriteria
    spec.typeScript:
      - name: GitQueryBranchStatsCriteria
        fullName: GitQueryBranchStatsCriteria
        uid: azure-devops-extension-api.Git.Git.d.GitQueryBranchStatsCriteria
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitBranchStats[]>'
    name: 'GitBranchStats[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitBranchStats
        fullName: GitBranchStats
        uid: azure-devops-extension-api.Git.Git.d.GitBranchStats
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitCommitChanges>
    name: GitCommitChanges>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitCommitChanges
        fullName: GitCommitChanges
        uid: azure-devops-extension-api.Git.Git.d.GitCommitChanges
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitCommitRef[]>'
    name: 'GitCommitRef[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitCommitRef
        fullName: GitCommitRef
        uid: azure-devops-extension-api.Git.Git.d.GitCommitRef
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.Comment[]>'
    name: 'Comment[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Comment
        fullName: Comment
        uid: azure-devops-extension-api.Git.Git.d.Comment
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitCommit>
    name: GitCommit>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitCommit
        fullName: GitCommit
        uid: azure-devops-extension-api.Git.Git.d.GitCommit
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitBaseVersionDescriptor
    name: GitBaseVersionDescriptor
    spec.typeScript:
      - name: GitBaseVersionDescriptor
        fullName: GitBaseVersionDescriptor
        uid: azure-devops-extension-api.Git.Git.d.GitBaseVersionDescriptor
  - uid: azure-devops-extension-api.Git.Git.d.GitTargetVersionDescriptor
    name: GitTargetVersionDescriptor
    spec.typeScript:
      - name: GitTargetVersionDescriptor
        fullName: GitTargetVersionDescriptor
        uid: azure-devops-extension-api.Git.Git.d.GitTargetVersionDescriptor
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitCommitDiffs>
    name: GitCommitDiffs>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitCommitDiffs
        fullName: GitCommitDiffs
        uid: azure-devops-extension-api.Git.Git.d.GitCommitDiffs
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Git.Git.d.GitQueryCommitsCriteria
    name: GitQueryCommitsCriteria
    spec.typeScript:
      - name: GitQueryCommitsCriteria
        fullName: GitQueryCommitsCriteria
        uid: azure-devops-extension-api.Git.Git.d.GitQueryCommitsCriteria
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitDeletedRepository[]>'
    name: 'GitDeletedRepository[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitDeletedRepository
        fullName: GitDeletedRepository
        uid: azure-devops-extension-api.Git.Git.d.GitDeletedRepository
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.FileDiffsCriteria
    name: FileDiffsCriteria
    spec.typeScript:
      - name: FileDiffsCriteria
        fullName: FileDiffsCriteria
        uid: azure-devops-extension-api.Git.Git.d.FileDiffsCriteria
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.FileDiff[]>'
    name: 'FileDiff[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: FileDiff
        fullName: FileDiff
        uid: azure-devops-extension-api.Git.Git.d.FileDiff
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitForkSyncRequest[]>'
    name: 'GitForkSyncRequest[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitForkSyncRequest
        fullName: GitForkSyncRequest
        uid: azure-devops-extension-api.Git.Git.d.GitForkSyncRequest
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitRepositoryRef[]>'
    name: 'GitRepositoryRef[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRepositoryRef
        fullName: GitRepositoryRef
        uid: azure-devops-extension-api.Git.Git.d.GitRepositoryRef
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
    name: VersionControlRecursionType
    spec.typeScript:
      - name: VersionControlRecursionType
        fullName: VersionControlRecursionType
        uid: azure-devops-extension-api.Git.Git.d.VersionControlRecursionType
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitItem>
    name: GitItem>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitItem
        fullName: GitItem
        uid: azure-devops-extension-api.Git.Git.d.GitItem
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitItem[]>'
    name: 'GitItem[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitItem
        fullName: GitItem
        uid: azure-devops-extension-api.Git.Git.d.GitItem
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitItemRequestData
    name: GitItemRequestData
    spec.typeScript:
      - name: GitItemRequestData
        fullName: GitItemRequestData
        uid: azure-devops-extension-api.Git.Git.d.GitItemRequestData
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitItem[][]>'
    name: 'GitItem[][]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitItem
        fullName: GitItem
        uid: azure-devops-extension-api.Git.Git.d.GitItem
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'Promise<azure-devops-extension-api.WebApi.WebApi.d.IdentityRef[]>'
    name: 'IdentityRef[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: IdentityRef
        fullName: IdentityRef
        uid: azure-devops-extension-api.WebApi.WebApi.d.IdentityRef
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitConflict>
    name: GitConflict>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitConflict
        fullName: GitConflict
        uid: azure-devops-extension-api.Git.Git.d.GitConflict
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitConflict[]>'
    name: 'GitConflict[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitConflict
        fullName: GitConflict
        uid: azure-devops-extension-api.Git.Git.d.GitConflict
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIteration>
    name: GitPullRequestIteration>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestIteration
        fullName: GitPullRequestIteration
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestIteration
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIterationChanges>
    name: GitPullRequestIterationChanges>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestIterationChanges
        fullName: GitPullRequestIterationChanges
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestIterationChanges
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestStatus[]>'
    name: 'GitPullRequestStatus[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestStatus
        fullName: GitPullRequestStatus
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestStatus
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestIteration[]>'
    name: 'GitPullRequestIteration[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestIteration
        fullName: GitPullRequestIteration
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestIteration
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Core.Core.d.WebApiTagDefinition[]>'
    name: 'WebApiTagDefinition[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: WebApiTagDefinition
        fullName: WebApiTagDefinition
        uid: azure-devops-extension-api.Core.Core.d.WebApiTagDefinition
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPullRequestQuery
    name: GitPullRequestQuery
    spec.typeScript:
      - name: GitPullRequestQuery
        fullName: GitPullRequestQuery
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestQuery
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestQuery>
    name: GitPullRequestQuery>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestQuery
        fullName: GitPullRequestQuery
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestQuery
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.WebApi.WebApi.d.ResourceRef[]>'
    name: 'ResourceRef[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ResourceRef
        fullName: ResourceRef
        uid: azure-devops-extension-api.WebApi.WebApi.d.ResourceRef
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPullRequestSearchCriteria
    name: GitPullRequestSearchCriteria
    spec.typeScript:
      - name: GitPullRequestSearchCriteria
        fullName: GitPullRequestSearchCriteria
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestSearchCriteria
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitPullRequest[]>'
    name: 'GitPullRequest[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequest
        fullName: GitPullRequest
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequest
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitPushSearchCriteria
    name: GitPushSearchCriteria
    spec.typeScript:
      - name: GitPushSearchCriteria
        fullName: GitPushSearchCriteria
        uid: azure-devops-extension-api.Git.Git.d.GitPushSearchCriteria
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitPush[]>'
    name: 'GitPush[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPush
        fullName: GitPush
        uid: azure-devops-extension-api.Git.Git.d.GitPush
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitRefFavorite[]>'
    name: 'GitRefFavorite[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRefFavorite
        fullName: GitRefFavorite
        uid: azure-devops-extension-api.Git.Git.d.GitRefFavorite
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitRef[]>'
    name: 'GitRef[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRef
        fullName: GitRef
        uid: azure-devops-extension-api.Git.Git.d.GitRef
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitRepository[]>'
    name: 'GitRepository[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRepository
        fullName: GitRepository
        uid: azure-devops-extension-api.Git.Git.d.GitRepository
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitStatus[]>'
    name: 'GitStatus[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitStatus
        fullName: GitStatus
        uid: azure-devops-extension-api.Git.Git.d.GitStatus
      - name: '[]>'
        fullName: '[]>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitSuggestion[]>'
    name: 'GitSuggestion[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitSuggestion
        fullName: GitSuggestion
        uid: azure-devops-extension-api.Git.Git.d.GitSuggestion
      - name: '[]>'
        fullName: '[]>'
  - uid: >-
      Promise<azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread[]>
    name: 'GitPullRequestCommentThread[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitPullRequestCommentThread
        fullName: GitPullRequestCommentThread
        uid: azure-devops-extension-api.Git.Git.d.GitPullRequestCommentThread
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitTreeRef>
    name: GitTreeRef>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitTreeRef
        fullName: GitTreeRef
        uid: azure-devops-extension-api.Git.Git.d.GitTreeRef
      - name: '>'
        fullName: '>'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitImportRequest[]>'
    name: 'GitImportRequest[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitImportRequest
        fullName: GitImportRequest
        uid: azure-devops-extension-api.Git.Git.d.GitImportRequest
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitRecycleBinRepositoryDetails
    name: GitRecycleBinRepositoryDetails
    spec.typeScript:
      - name: GitRecycleBinRepositoryDetails
        fullName: GitRecycleBinRepositoryDetails
        uid: azure-devops-extension-api.Git.Git.d.GitRecycleBinRepositoryDetails
  - uid: azure-devops-extension-api.Git.Git.d.ShareNotificationContext
    name: ShareNotificationContext
    spec.typeScript:
      - name: ShareNotificationContext
        fullName: ShareNotificationContext
        uid: azure-devops-extension-api.Git.Git.d.ShareNotificationContext
  - uid: azure-devops-extension-api.Git.Git.d.GitConflict
    name: GitConflict
    spec.typeScript:
      - name: GitConflict
        fullName: GitConflict
        uid: azure-devops-extension-api.Git.Git.d.GitConflict
  - uid: 'azure-devops-extension-api.Git.Git.d.GitConflict[]'
    name: 'GitConflict[]'
    spec.typeScript:
      - name: GitConflict
        fullName: GitConflict
        uid: azure-devops-extension-api.Git.Git.d.GitConflict
      - name: '[]'
        fullName: '[]'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitConflictUpdateResult[]>'
    name: 'GitConflictUpdateResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitConflictUpdateResult
        fullName: GitConflictUpdateResult
        uid: azure-devops-extension-api.Git.Git.d.GitConflictUpdateResult
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.WebApi.WebApi.d.JsonPatchDocument
    name: JsonPatchDocument
    spec.typeScript:
      - name: JsonPatchDocument
        fullName: JsonPatchDocument
        uid: azure-devops-extension-api.WebApi.WebApi.d.JsonPatchDocument
  - uid: 'azure-devops-extension-api.Git.Git.d.IdentityRefWithVote[]'
    name: 'IdentityRefWithVote[]'
    spec.typeScript:
      - name: IdentityRefWithVote
        fullName: IdentityRefWithVote
        uid: azure-devops-extension-api.Git.Git.d.IdentityRefWithVote
      - name: '[]'
        fullName: '[]'
  - uid: azure-devops-extension-api.Git.Git.d.GitRefUpdate
    name: GitRefUpdate
    spec.typeScript:
      - name: GitRefUpdate
        fullName: GitRefUpdate
        uid: azure-devops-extension-api.Git.Git.d.GitRefUpdate
  - uid: Promise<azure-devops-extension-api.Git.Git.d.GitRef>
    name: GitRef>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRef
        fullName: GitRef
        uid: azure-devops-extension-api.Git.Git.d.GitRef
      - name: '>'
        fullName: '>'
  - uid: 'azure-devops-extension-api.Git.Git.d.GitRefUpdate[]'
    name: 'GitRefUpdate[]'
    spec.typeScript:
      - name: GitRefUpdate
        fullName: GitRefUpdate
        uid: azure-devops-extension-api.Git.Git.d.GitRefUpdate
      - name: '[]'
        fullName: '[]'
  - uid: 'Promise<azure-devops-extension-api.Git.Git.d.GitRefUpdateResult[]>'
    name: 'GitRefUpdateResult[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GitRefUpdateResult
        fullName: GitRefUpdateResult
        uid: azure-devops-extension-api.Git.Git.d.GitRefUpdateResult
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.Git.Git.d.GitRepository
    name: GitRepository
    spec.typeScript:
      - name: GitRepository
        fullName: GitRepository
        uid: azure-devops-extension-api.Git.Git.d.GitRepository

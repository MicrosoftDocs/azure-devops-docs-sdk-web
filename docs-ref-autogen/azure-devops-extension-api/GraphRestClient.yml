### YamlMime:UniversalReference
items:
  - uid: azure-devops-extension-api.GraphRestClient
    name: GraphRestClient
    fullName: GraphRestClient
    children:
      - azure-devops-extension-api.GraphRestClient.addMembership
      - azure-devops-extension-api.GraphRestClient.checkMembershipExistence
      - azure-devops-extension-api.GraphRestClient.createGroup
      - azure-devops-extension-api.GraphRestClient.createScope
      - azure-devops-extension-api.GraphRestClient.createUser
      - azure-devops-extension-api.GraphRestClient.deleteAvatar
      - azure-devops-extension-api.GraphRestClient.deleteGroup
      - azure-devops-extension-api.GraphRestClient.deleteScope
      - azure-devops-extension-api.GraphRestClient.deleteUser
      - azure-devops-extension-api.GraphRestClient.getAvatar
      - azure-devops-extension-api.GraphRestClient.getCachePolicies
      - azure-devops-extension-api.GraphRestClient.getDescriptor
      - azure-devops-extension-api.GraphRestClient.getFederatedProviderData
      - azure-devops-extension-api.GraphRestClient.getGroup
      - azure-devops-extension-api.GraphRestClient.getMemberByDescriptor
      - azure-devops-extension-api.GraphRestClient.getMembership
      - azure-devops-extension-api.GraphRestClient.getMembershipState
      - azure-devops-extension-api.GraphRestClient.getProviderInfo
      - azure-devops-extension-api.GraphRestClient.getScope
      - azure-devops-extension-api.GraphRestClient.getStorageKey
      - azure-devops-extension-api.GraphRestClient.getSubject
      - azure-devops-extension-api.GraphRestClient.getUser
      - azure-devops-extension-api.GraphRestClient.constructor
      - azure-devops-extension-api.GraphRestClient.listMemberships
      - azure-devops-extension-api.GraphRestClient.lookupMembers
      - azure-devops-extension-api.GraphRestClient.lookupMembershipTraversals
      - azure-devops-extension-api.GraphRestClient.lookupSubjects
      - azure-devops-extension-api.GraphRestClient.removeMembership
      - azure-devops-extension-api.GraphRestClient.RESOURCE_AREA_ID
      - azure-devops-extension-api.GraphRestClient.setAvatar
      - azure-devops-extension-api.GraphRestClient.traverseMemberships
      - azure-devops-extension-api.GraphRestClient.updateGroup
      - azure-devops-extension-api.GraphRestClient.updateScope
      - azure-devops-extension-api.GraphRestClient.updateUser
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: azure-devops-extension-api.RestClientBase
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.addMembership
    name: 'addMembership(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a new membership between a container and subject.
    syntax:
      content: >-
        function addMembership(subjectDescriptor: string, containerDescriptor:
        string)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >-
            A descriptor to a group or user that can be the child subject in the
            relationship.
        - id: containerDescriptor
          type:
            - string
          description: >
            A descriptor to a group that can be the container in the
            relationship.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphMembership>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.checkMembershipExistence
    name: 'checkMembershipExistence(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Check to see if a membership relationship between a container and subject
      exists.
    syntax:
      content: >-
        function checkMembershipExistence(subjectDescriptor: string,
        containerDescriptor: string)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: The group or user that is a child subject of the relationship.
        - id: containerDescriptor
          type:
            - string
          description: |
            The group that is the container in the relationship.
      return:
        type:
          - Promise<boolean>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.createGroup
    name: 'createGroup(GraphGroupCreationContext, string, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Create a new VSTS group or materialize an existing AAD group.
    syntax:
      content: >-
        function createGroup(creationContext: GraphGroupCreationContext,
        scopeDescriptor?: string, groupDescriptors?: string[])
      parameters:
        - id: creationContext
          type:
            - azure-devops-extension-api.GraphGroupCreationContext
          description: >-
            The subset of the full graph group used to uniquely find the graph
            subject in an external provider.
        - id: scopeDescriptor
          type:
            - string
          description: >-
            A descriptor referencing the scope (collection, project) in which
            the group should be created. If omitted, will be created in the
            scope of the enclosing account or organization. Valid only for VSTS
            groups.
          optional: true
        - id: groupDescriptors
          type:
            - 'string[]'
          description: >
            A comma separated list of descriptors referencing groups you want
            the graph group to join
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.GraphGroup>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.createScope
    name: 'createScope(GraphScopeCreationContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function createScope(creationContext: GraphScopeCreationContext,
        scopeDescriptor?: string)
      parameters:
        - id: creationContext
          type:
            - azure-devops-extension-api.GraphScopeCreationContext
          description: '-'
        - id: scopeDescriptor
          type:
            - string
          description: |
            -
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.GraphScope>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.createUser
    name: 'createUser(GraphUserCreationContext, string[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: Materialize an existing AAD or MSA user into the VSTS account.
    syntax:
      content: >-
        function createUser(creationContext: GraphUserCreationContext,
        groupDescriptors?: string[])
      parameters:
        - id: creationContext
          type:
            - azure-devops-extension-api.GraphUserCreationContext
          description: >-
            The subset of the full graph user used to uniquely find the graph
            subject in an external provider.
        - id: groupDescriptors
          type:
            - 'string[]'
          description: >
            A comma separated list of descriptors of groups you want the graph
            user to join
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.GraphUser>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.deleteAvatar
    name: deleteAvatar(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteAvatar(subjectDescriptor: string)'
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.deleteGroup
    name: deleteGroup(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Removes a VSTS group from all of its parent groups.
    syntax:
      content: 'function deleteGroup(groupDescriptor: string)'
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: |
            The descriptor of the group to delete.
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.deleteScope
    name: deleteScope(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function deleteScope(scopeDescriptor: string)'
      parameters:
        - id: scopeDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.deleteUser
    name: deleteUser(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Disables a user.
    syntax:
      content: 'function deleteUser(userDescriptor: string)'
      parameters:
        - id: userDescriptor
          type:
            - string
          description: |
            The descriptor of the user to delete.
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getAvatar
    name: 'getAvatar(string, AvatarSize, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getAvatar(subjectDescriptor: string, size?: AvatarSize,
        format?: string)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: '-'
        - id: size
          type:
            - azure-devops-extension-api.AvatarSize
          description: '-'
          optional: true
        - id: format
          type:
            - string
          description: |
            -
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.Avatar>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getCachePolicies
    name: getCachePolicies()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getCachePolicies()
      parameters: []
      return:
        type:
          - Promise<azure-devops-extension-api.GraphCachePolicies>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getDescriptor
    name: getDescriptor(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Resolve a storage key to a descriptor
    syntax:
      content: 'function getDescriptor(storageKey: string)'
      parameters:
        - id: storageKey
          type:
            - string
          description: |
            Storage key of the subject (user, group, scope, etc.) to resolve
      return:
        type:
          - Promise<azure-devops-extension-api.GraphDescriptorResult>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getFederatedProviderData
    name: 'getFederatedProviderData(string, string, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Acquires the full set of federated provider authentication data available
      for the given graph subject and provider name.
    syntax:
      content: >-
        function getFederatedProviderData(subjectDescriptor: string,
        providerName: string, versionHint?: number)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: the descriptor of the graph subject that we should acquire data for
        - id: providerName
          type:
            - string
          description: 'the name of the provider to acquire data for, e.g. "github.com"'
        - id: versionHint
          type:
            - number
          description: >
            a version hint that can be used for optimistic cache concurrency and
            to support retries on access token failures; note that this is a
            hint only and does not guarantee a particular version on the
            response
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.GraphFederatedProviderData>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getGroup
    name: getGroup(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a group by its descriptor.
    syntax:
      content: 'function getGroup(groupDescriptor: string)'
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: |
            The descriptor of the desired graph group.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphGroup>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getMemberByDescriptor
    name: getMemberByDescriptor(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      This endpoint returns a result for any member that has ever been valid in
      the system, even if the member has since been deleted or has had all their
      memberships deleted. The current validity of the member is indicated
      through its disabled property, which is omitted when false.
    syntax:
      content: 'function getMemberByDescriptor(memberDescriptor: string)'
      parameters:
        - id: memberDescriptor
          type:
            - string
          description: |
            The descriptor of the desired member.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphMember>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getMembership
    name: 'getMembership(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a membership relationship between a container and subject.
    syntax:
      content: >-
        function getMembership(subjectDescriptor: string, containerDescriptor:
        string)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: A descriptor to the child subject in the relationship.
        - id: containerDescriptor
          type:
            - string
          description: |
            A descriptor to the container in the relationship.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphMembership>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getMembershipState
    name: getMembershipState(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Check whether a subject is active or inactive.
    syntax:
      content: 'function getMembershipState(subjectDescriptor: string)'
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >
            Descriptor of the subject (user, group, scope, etc.) to check state
            of
      return:
        type:
          - Promise<azure-devops-extension-api.GraphMembershipState>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getProviderInfo
    name: getProviderInfo(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getProviderInfo(userDescriptor: string)'
      parameters:
        - id: userDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<azure-devops-extension-api.GraphProviderInfo>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getScope
    name: getScope(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a scope identified by its descriptor
    syntax:
      content: 'function getScope(scopeDescriptor: string)'
      parameters:
        - id: scopeDescriptor
          type:
            - string
          description: |
            A descriptor that uniquely identifies a scope.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphScope>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getStorageKey
    name: getStorageKey(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Resolve a descriptor to a storage key.
    syntax:
      content: 'function getStorageKey(subjectDescriptor: string)'
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<azure-devops-extension-api.GraphStorageKeyResult>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getSubject
    name: getSubject(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getSubject(subjectDescriptor: string)'
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<azure-devops-extension-api.GraphSubject>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.getUser
    name: getUser(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Get a user by its descriptor.
    syntax:
      content: 'function getUser(userDescriptor: string)'
      parameters:
        - id: userDescriptor
          type:
            - string
          description: |
            The descriptor of the desired user.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphUser>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.constructor
    name: GraphRestClient(IVssRestClientOptions)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new GraphRestClient(options: IVssRestClientOptions)'
      parameters:
        - id: options
          type:
            - azure-devops-extension-api.IVssRestClientOptions
          description: ''
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.listMemberships
    name: 'listMemberships(string, GraphTraversalDirection, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Get all the memberships where this descriptor is a member in the
      relationship.
    syntax:
      content: >-
        function listMemberships(subjectDescriptor: string, direction?:
        GraphTraversalDirection, depth?: number)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: Fetch all direct memberships of this descriptor.
        - id: direction
          type:
            - azure-devops-extension-api.GraphTraversalDirection
          description: Defaults to Up.
          optional: true
        - id: depth
          type:
            - number
          description: >
            The maximum number of edges to traverse up or down the membership
            tree. Currently the only supported value is '1'.
          optional: true
      return:
        type:
          - 'Promise<azure-devops-extension-api.GraphMembership[]>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.lookupMembers
    name: lookupMembers(GraphSubjectLookup)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function lookupMembers(memberLookup: GraphSubjectLookup)'
      parameters:
        - id: memberLookup
          type:
            - azure-devops-extension-api.GraphSubjectLookup
          description: |
            -
      return:
        type:
          - 'Promise<[key: string]: azure-devops-extension-api.GraphMember>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.lookupMembershipTraversals
    name: >-
      lookupMembershipTraversals(GraphSubjectLookup, GraphTraversalDirection,
      number)
    children: []
    type: method
    langs:
      - typeScript
    summary: Traverse memberships of the given subject descriptors.
    syntax:
      content: >-
        function lookupMembershipTraversals(membershipTraversalLookup:
        GraphSubjectLookup, direction?: GraphTraversalDirection, depth?: number)
      parameters:
        - id: membershipTraversalLookup
          type:
            - azure-devops-extension-api.GraphSubjectLookup
          description: >-
            Fetch the descendants/ancestors of the list of descriptors depending
            on direction.
        - id: direction
          type:
            - azure-devops-extension-api.GraphTraversalDirection
          description: The default value is Unknown.
          optional: true
        - id: depth
          type:
            - number
          description: |
            The default value is '1'.
          optional: true
      return:
        type:
          - >-
            Promise<[key: string]:
            azure-devops-extension-api.GraphMembershipTraversal>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.lookupSubjects
    name: lookupSubjects(GraphSubjectLookup)
    children: []
    type: method
    langs:
      - typeScript
    summary: 'Resolve descriptors to users, groups or scopes (Subjects) in a batch.'
    syntax:
      content: 'function lookupSubjects(subjectLookup: GraphSubjectLookup)'
      parameters:
        - id: subjectLookup
          type:
            - azure-devops-extension-api.GraphSubjectLookup
          description: >
            A list of descriptors that specifies a subset of subjects to
            retrieve. Each descriptor uniquely identifies the subject across all
            instance scopes, but only at a single point in time.
      return:
        type:
          - 'Promise<[key: string]: azure-devops-extension-api.GraphSubject>'
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.removeMembership
    name: 'removeMembership(string, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Deletes a membership between a container and subject.
    syntax:
      content: >-
        function removeMembership(subjectDescriptor: string,
        containerDescriptor: string)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >-
            A descriptor to a group or user that is the child subject in the
            relationship.
        - id: containerDescriptor
          type:
            - string
          description: |
            A descriptor to a group that is the container in the relationship.
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.RESOURCE_AREA_ID
    name: RESOURCE_AREA_ID
    fullName: RESOURCE_AREA_ID
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static RESOURCE_AREA_ID: string'
      return:
        type:
          - string
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.setAvatar
    name: 'setAvatar(Avatar, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setAvatar(avatar: Avatar, subjectDescriptor: string)'
      parameters:
        - id: avatar
          type:
            - azure-devops-extension-api.Avatar
          description: '-'
        - id: subjectDescriptor
          type:
            - string
          description: |
            -
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.traverseMemberships
    name: 'traverseMemberships(string, GraphTraversalDirection, number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Traverse memberships of the given subject descriptor.
    syntax:
      content: >-
        function traverseMemberships(subjectDescriptor: string, direction?:
        GraphTraversalDirection, depth?: number)
      parameters:
        - id: subjectDescriptor
          type:
            - string
          description: >-
            Fetch the descendants/ancestors of this descriptor depending on
            direction.
        - id: direction
          type:
            - azure-devops-extension-api.GraphTraversalDirection
          description: The default value is Unknown.
          optional: true
        - id: depth
          type:
            - number
          description: |
            The default value is '1'.
          optional: true
      return:
        type:
          - Promise<azure-devops-extension-api.GraphMembershipTraversal>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.updateGroup
    name: 'updateGroup(string, JsonPatchDocument)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Update the properties of a VSTS group.
    syntax:
      content: >-
        function updateGroup(groupDescriptor: string, patchDocument:
        JsonPatchDocument)
      parameters:
        - id: groupDescriptor
          type:
            - string
          description: The descriptor of the group to modify.
        - id: patchDocument
          type:
            - azure-devops-extension-api.JsonPatchDocument
          description: |
            The JSON+Patch document containing the fields to alter.
      return:
        type:
          - Promise<azure-devops-extension-api.GraphGroup>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.updateScope
    name: 'updateScope(string, JsonPatchDocument)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function updateScope(scopeDescriptor: string, patchDocument:
        JsonPatchDocument)
      parameters:
        - id: scopeDescriptor
          type:
            - string
          description: '-'
        - id: patchDocument
          type:
            - azure-devops-extension-api.JsonPatchDocument
          description: |
            -
      return:
        type:
          - Promise<void>
    package: azure-devops-extension-api
  - uid: azure-devops-extension-api.GraphRestClient.updateUser
    name: 'updateUser(GraphUserUpdateContext, string)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Map an existing user to a different identity
    syntax:
      content: >-
        function updateUser(updateContext: GraphUserUpdateContext,
        userDescriptor: string)
      parameters:
        - id: updateContext
          type:
            - azure-devops-extension-api.GraphUserUpdateContext
          description: >-
            The subset of the full graph user used to uniquely find the graph
            subject in an external provider.
        - id: userDescriptor
          type:
            - string
          description: |
            the descriptor of the user to update
      return:
        type:
          - Promise<azure-devops-extension-api.GraphUser>
    package: azure-devops-extension-api
references:
  - uid: azure-devops-extension-api.RestClientBase
    name: RestClientBase
    spec.typeScript:
      - name: RestClientBase
        fullName: RestClientBase
        uid: azure-devops-extension-api.RestClientBase
  - uid: azure-devops-extension-api.IVssRestClientOptions
    name: IVssRestClientOptions
    spec.typeScript:
      - name: IVssRestClientOptions
        fullName: IVssRestClientOptions
        uid: azure-devops-extension-api.IVssRestClientOptions
  - uid: Promise<azure-devops-extension-api.GraphMembership>
    name: GraphMembership>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphMembership
        fullName: GraphMembership
        uid: azure-devops-extension-api.GraphMembership
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.GraphGroupCreationContext
    name: GraphGroupCreationContext
    spec.typeScript:
      - name: GraphGroupCreationContext
        fullName: GraphGroupCreationContext
        uid: azure-devops-extension-api.GraphGroupCreationContext
  - uid: Promise<azure-devops-extension-api.GraphGroup>
    name: GraphGroup>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphGroup
        fullName: GraphGroup
        uid: azure-devops-extension-api.GraphGroup
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.GraphScopeCreationContext
    name: GraphScopeCreationContext
    spec.typeScript:
      - name: GraphScopeCreationContext
        fullName: GraphScopeCreationContext
        uid: azure-devops-extension-api.GraphScopeCreationContext
  - uid: Promise<azure-devops-extension-api.GraphScope>
    name: GraphScope>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphScope
        fullName: GraphScope
        uid: azure-devops-extension-api.GraphScope
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.GraphUserCreationContext
    name: GraphUserCreationContext
    spec.typeScript:
      - name: GraphUserCreationContext
        fullName: GraphUserCreationContext
        uid: azure-devops-extension-api.GraphUserCreationContext
  - uid: Promise<azure-devops-extension-api.GraphUser>
    name: GraphUser>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphUser
        fullName: GraphUser
        uid: azure-devops-extension-api.GraphUser
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.AvatarSize
    name: AvatarSize
    spec.typeScript:
      - name: AvatarSize
        fullName: AvatarSize
        uid: azure-devops-extension-api.AvatarSize
  - uid: Promise<azure-devops-extension-api.Avatar>
    name: Avatar>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Avatar
        fullName: Avatar
        uid: azure-devops-extension-api.Avatar
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphCachePolicies>
    name: GraphCachePolicies>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphCachePolicies
        fullName: GraphCachePolicies
        uid: azure-devops-extension-api.GraphCachePolicies
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphDescriptorResult>
    name: GraphDescriptorResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphDescriptorResult
        fullName: GraphDescriptorResult
        uid: azure-devops-extension-api.GraphDescriptorResult
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphFederatedProviderData>
    name: GraphFederatedProviderData>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphFederatedProviderData
        fullName: GraphFederatedProviderData
        uid: azure-devops-extension-api.GraphFederatedProviderData
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphMember>
    name: GraphMember>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphMember
        fullName: GraphMember
        uid: azure-devops-extension-api.GraphMember
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphMembershipState>
    name: GraphMembershipState>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphMembershipState
        fullName: GraphMembershipState
        uid: azure-devops-extension-api.GraphMembershipState
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphProviderInfo>
    name: GraphProviderInfo>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphProviderInfo
        fullName: GraphProviderInfo
        uid: azure-devops-extension-api.GraphProviderInfo
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphStorageKeyResult>
    name: GraphStorageKeyResult>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphStorageKeyResult
        fullName: GraphStorageKeyResult
        uid: azure-devops-extension-api.GraphStorageKeyResult
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-devops-extension-api.GraphSubject>
    name: GraphSubject>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphSubject
        fullName: GraphSubject
        uid: azure-devops-extension-api.GraphSubject
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.GraphTraversalDirection
    name: GraphTraversalDirection
    spec.typeScript:
      - name: GraphTraversalDirection
        fullName: GraphTraversalDirection
        uid: azure-devops-extension-api.GraphTraversalDirection
  - uid: 'Promise<azure-devops-extension-api.GraphMembership[]>'
    name: 'GraphMembership[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphMembership
        fullName: GraphMembership
        uid: azure-devops-extension-api.GraphMembership
      - name: '[]>'
        fullName: '[]>'
  - uid: azure-devops-extension-api.GraphSubjectLookup
    name: GraphSubjectLookup
    spec.typeScript:
      - name: GraphSubjectLookup
        fullName: GraphSubjectLookup
        uid: azure-devops-extension-api.GraphSubjectLookup
  - uid: 'Promise<[key: string]: azure-devops-extension-api.GraphMember>'
    name: GraphMember>
    spec.typeScript:
      - name: 'Promise<[key: string]: '
        fullName: 'Promise<[key: string]: '
      - name: GraphMember
        fullName: GraphMember
        uid: azure-devops-extension-api.GraphMember
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<[key: string]:
      azure-devops-extension-api.GraphMembershipTraversal>
    name: GraphMembershipTraversal>
    spec.typeScript:
      - name: 'Promise<[key: string]: '
        fullName: 'Promise<[key: string]: '
      - name: GraphMembershipTraversal
        fullName: GraphMembershipTraversal
        uid: azure-devops-extension-api.GraphMembershipTraversal
      - name: '>'
        fullName: '>'
  - uid: 'Promise<[key: string]: azure-devops-extension-api.GraphSubject>'
    name: GraphSubject>
    spec.typeScript:
      - name: 'Promise<[key: string]: '
        fullName: 'Promise<[key: string]: '
      - name: GraphSubject
        fullName: GraphSubject
        uid: azure-devops-extension-api.GraphSubject
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.Avatar
    name: Avatar
    spec.typeScript:
      - name: Avatar
        fullName: Avatar
        uid: azure-devops-extension-api.Avatar
  - uid: Promise<azure-devops-extension-api.GraphMembershipTraversal>
    name: GraphMembershipTraversal>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: GraphMembershipTraversal
        fullName: GraphMembershipTraversal
        uid: azure-devops-extension-api.GraphMembershipTraversal
      - name: '>'
        fullName: '>'
  - uid: azure-devops-extension-api.JsonPatchDocument
    name: JsonPatchDocument
    spec.typeScript:
      - name: JsonPatchDocument
        fullName: JsonPatchDocument
        uid: azure-devops-extension-api.JsonPatchDocument
  - uid: azure-devops-extension-api.GraphUserUpdateContext
    name: GraphUserUpdateContext
    spec.typeScript:
      - name: GraphUserUpdateContext
        fullName: GraphUserUpdateContext
        uid: azure-devops-extension-api.GraphUserUpdateContext

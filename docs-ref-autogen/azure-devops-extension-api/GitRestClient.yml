### YamlMime:TSType
name: GitRestClient
uid: azure-devops-extension-api.GitRestClient
package: azure-devops-extension-api
summary: ''
fullName: GitRestClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: GitRestClient(IVssRestClientOptions)
    uid: azure-devops-extension-api.GitRestClient.constructor
    package: azure-devops-extension-api
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'new GitRestClient(options: IVssRestClientOptions)'
      parameters:
        - id: options
          type: <xref uid="azure-devops-extension-api.IVssRestClientOptions" />
          description: ''
properties:
  - name: RESOURCE_AREA_ID
    uid: azure-devops-extension-api.GitRestClient.RESOURCE_AREA_ID
    package: azure-devops-extension-api
    summary: ''
    fullName: RESOURCE_AREA_ID
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static RESOURCE_AREA_ID: string'
      return:
        description: ''
        type: string
methods:
  - name: 'createAnnotatedTag(GitAnnotatedTag, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createAnnotatedTag
    package: azure-devops-extension-api
    summary: Create an annotated tag.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAnnotatedTag(tagObject: GitAnnotatedTag, project: string,
        repositoryId: string): Promise<GitAnnotatedTag>
      parameters:
        - id: tagObject
          type: <xref uid="azure-devops-extension-api.GitAnnotatedTag" />
          description: Object containing details of tag to be created.
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            ID or name of the repository.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitAnnotatedTag"
          />&gt;
  - name: 'createAttachment(any, string, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createAttachment
    package: azure-devops-extension-api
    summary: Attach a new file to a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createAttachment(content: any, fileName: string, repositoryId:
        string, pullRequestId: number, project?: string): Promise<Attachment>
      parameters:
        - id: content
          type: any
          description: Content to upload
        - id: fileName
          type: string
          description: The name of the file.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.Attachment" />&gt;
  - name: 'createCherryPick(GitAsyncRefOperationParameters, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createCherryPick
    package: azure-devops-extension-api
    summary: >-
      Cherry pick a specific commit or commits that are associated to a pull
      request into a new branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createCherryPick(cherryPickToCreate:
        GitAsyncRefOperationParameters, project: string, repositoryId: string):
        Promise<GitCherryPick>
      parameters:
        - id: cherryPickToCreate
          type: >-
            <xref
            uid="azure-devops-extension-api.GitAsyncRefOperationParameters" />
          description: '-'
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            ID of the repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitCherryPick" />&gt;
  - name: 'createComment(Comment, string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createComment
    package: azure-devops-extension-api
    summary: >-
      Create a comment on a specific thread in a pull request (up to 500
      comments can be created per thread).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, project?: string):
        Promise<Comment>
      parameters:
        - id: comment
          type: <xref uid="azure-devops-extension-api.Comment" />
          description: 'The comment to create. Comments can be up to 150,000 characters.'
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread that the desired comment is in.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.Comment" />&gt;
  - name: 'createCommitStatus(GitStatus, string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createCommitStatus
    package: azure-devops-extension-api
    summary: Create Git commit status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createCommitStatus(gitCommitStatusToCreate: GitStatus,
        commitId: string, repositoryId: string, project?: string):
        Promise<GitStatus>
      parameters:
        - id: gitCommitStatusToCreate
          type: <xref uid="azure-devops-extension-api.GitStatus" />
          description: Git commit status object to create.
        - id: commitId
          type: string
          description: ID of the Git commit.
        - id: repositoryId
          type: string
          description: ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitStatus" />&gt;
  - name: 'createFavorite(GitRefFavorite, string)'
    uid: azure-devops-extension-api.GitRestClient.createFavorite
    package: azure-devops-extension-api
    summary: Creates a ref favorite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createFavorite(favorite: GitRefFavorite, project: string):
        Promise<GitRefFavorite>
      parameters:
        - id: favorite
          type: <xref uid="azure-devops-extension-api.GitRefFavorite" />
          description: The ref favorite to create.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRefFavorite"
          />&gt;
  - name: >-
      createForkSyncRequest(GitForkSyncRequestParameters, string, string,
      boolean)
    uid: azure-devops-extension-api.GitRestClient.createForkSyncRequest
    package: azure-devops-extension-api
    summary: >-
      Request that another repository's refs be fetched into this one. It syncs
      two existing forks. To create a fork, please see the
      [repositories endpoint](/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1).
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createForkSyncRequest(syncParams: GitForkSyncRequestParameters,
        repositoryNameOrId: string, project?: string, includeLinks?: boolean):
        Promise<GitForkSyncRequest>
      parameters:
        - id: syncParams
          type: >-
            <xref uid="azure-devops-extension-api.GitForkSyncRequestParameters"
            />
          description: Source repository and ref mapping.
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeLinks
          type: boolean
          description: |
            True to include links
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitForkSyncRequest"
          />&gt;
  - name: 'createImportRequest(GitImportRequest, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createImportRequest
    package: azure-devops-extension-api
    summary: Create an import request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createImportRequest(importRequest: GitImportRequest, project:
        string, repositoryId: string): Promise<GitImportRequest>
      parameters:
        - id: importRequest
          type: <xref uid="azure-devops-extension-api.GitImportRequest" />
          description: The import request to create.
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            The name or ID of the repository.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitImportRequest"
          />&gt;
  - name: 'createLike(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createLike
    package: azure-devops-extension-api
    summary: Add a like on a comment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type: number
          description: The ID of the comment.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'createMergeRequest(GitMergeParameters, string, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.createMergeRequest
    package: azure-devops-extension-api
    summary: >-
      Request a git merge operation. Currently we support merging only 2
      commits.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createMergeRequest(mergeParameters: GitMergeParameters,
        project: string, repositoryNameOrId: string, includeLinks?: boolean):
        Promise<GitMerge>
      parameters:
        - id: mergeParameters
          type: <xref uid="azure-devops-extension-api.GitMergeParameters" />
          description: Parents commitIds and merge commit messsage.
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: includeLinks
          type: boolean
          description: |
            True to include links
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitMerge" />&gt;
  - name: 'createPullRequest(GitPullRequest, string, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.createPullRequest
    package: azure-devops-extension-api
    summary: Create a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequest(gitPullRequestToCreate: GitPullRequest,
        repositoryId: string, project?: string, supportsIterations?: boolean):
        Promise<GitPullRequest>
      parameters:
        - id: gitPullRequestToCreate
          type: <xref uid="azure-devops-extension-api.GitPullRequest" />
          description: The pull request to create.
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: project
          type: string
          description: Project ID or project name
        - id: supportsIterations
          type: boolean
          description: >
            If true, subsequent pushes to the pull request will be individually
            reviewable. Set this to false for large pull requests for
            performance reasons if this functionality is not needed.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />&gt;
  - name: >-
      createPullRequestIterationStatus(GitPullRequestStatus, string, number,
      number, string)
    uid: azure-devops-extension-api.GitRestClient.createPullRequestIterationStatus
    package: azure-devops-extension-api
    summary: >-
      Create a pull request status on the iteration. This operation will have
      the same result as Create status on pull request with specified iteration
      ID in the request body.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequestIterationStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, iterationId: number,
        project?: string): Promise<GitPullRequestStatus>
      parameters:
        - id: status
          type: <xref uid="azure-devops-extension-api.GitPullRequestStatus" />
          description: Pull request status to create.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />&gt;
  - name: >-
      createPullRequestLabel(WebApiCreateTagRequestData, string, number, string,
      string)
    uid: azure-devops-extension-api.GitRestClient.createPullRequestLabel
    package: azure-devops-extension-api
    summary: >-
      Create a label for a specified pull request. The only required field is
      the name of the new label.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequestLabel(label: WebApiCreateTagRequestData,
        repositoryId: string, pullRequestId: number, project?: string,
        projectId?: string): Promise<WebApiTagDefinition>
      parameters:
        - id: label
          type: <xref uid="azure-devops-extension-api.WebApiCreateTagRequestData" />
          description: Label to assign to the pull request.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: |
            Project ID or project name.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.WebApiTagDefinition"
          />&gt;
  - name: >-
      createPullRequestReviewer(IdentityRefWithVote, string, number, string,
      string)
    uid: azure-devops-extension-api.GitRestClient.createPullRequestReviewer
    package: azure-devops-extension-api
    summary: Add a reviewer to a pull request or cast a vote.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequestReviewer(reviewer: IdentityRefWithVote,
        repositoryId: string, pullRequestId: number, reviewerId: string,
        project?: string): Promise<IdentityRefWithVote>
      parameters:
        - id: reviewer
          type: <xref uid="azure-devops-extension-api.IdentityRefWithVote" />
          description: >-
            Reviewer's vote.\<br /\>If the reviewer's ID is included here, it
            must match the reviewerID parameter.\<br /\>Reviewers can set their
            own vote with this method.  When adding other reviewers, vote must
            be set to zero.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: reviewerId
          type: string
          description: ID of the reviewer.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.IdentityRefWithVote"
          />&gt;
  - name: 'createPullRequestReviewers(IdentityRef[], string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createPullRequestReviewers
    package: azure-devops-extension-api
    summary: Add reviewers to a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequestReviewers(reviewers: IdentityRef[],
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<IdentityRefWithVote[]>
      parameters:
        - id: reviewers
          type: '<xref uid="azure-devops-extension-api.IdentityRef" />[]'
          description: Reviewers to add to the pull request.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.IdentityRefWithVote"
          />[]&gt;
  - name: 'createPullRequestStatus(GitPullRequestStatus, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createPullRequestStatus
    package: azure-devops-extension-api
    summary: Create a pull request status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPullRequestStatus(status: GitPullRequestStatus,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<GitPullRequestStatus>
      parameters:
        - id: status
          type: <xref uid="azure-devops-extension-api.GitPullRequestStatus" />
          description: Pull request status to create.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />&gt;
  - name: 'createPush(GitPush, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createPush
    package: azure-devops-extension-api
    summary: Push changes to the repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createPush(push: GitPush, repositoryId: string, project?:
        string): Promise<GitPush>
      parameters:
        - id: push
          type: <xref uid="azure-devops-extension-api.GitPush" />
          description: '-'
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitPush" />&gt;
  - name: 'createRepository(GitRepositoryCreateOptions, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createRepository
    package: azure-devops-extension-api
    summary: Create a git repository in a team project.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createRepository(gitRepositoryToCreate:
        GitRepositoryCreateOptions, project?: string, sourceRef?: string):
        Promise<GitRepository>
      parameters:
        - id: gitRepositoryToCreate
          type: <xref uid="azure-devops-extension-api.GitRepositoryCreateOptions" />
          description: >-
            Specify the repo name, team project and/or parent repository. Team
            project information can be ommitted from gitRepositoryToCreate if
            the request is project-scoped (i.e., includes project Id).
        - id: project
          type: string
          description: Project ID or project name
        - id: sourceRef
          type: string
          description: |
            [optional] Specify the source refs to use while creating a fork repo
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRepository" />&gt;
  - name: 'createRevert(GitAsyncRefOperationParameters, string, string)'
    uid: azure-devops-extension-api.GitRestClient.createRevert
    package: azure-devops-extension-api
    summary: >-
      Starts the operation to create a new branch which reverts changes
      introduced by either a specific commit or commits that are associated to a
      pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createRevert(revertToCreate: GitAsyncRefOperationParameters,
        project: string, repositoryId: string): Promise<GitRevert>
      parameters:
        - id: revertToCreate
          type: >-
            <xref
            uid="azure-devops-extension-api.GitAsyncRefOperationParameters" />
          description: '-'
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            ID of the repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRevert" />&gt;
  - name: 'createThread(GitPullRequestCommentThread, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.createThread
    package: azure-devops-extension-api
    summary: Create a thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function createThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<GitPullRequestCommentThread>
      parameters:
        - id: commentThread
          type: >-
            <xref uid="azure-devops-extension-api.GitPullRequestCommentThread"
            />
          description: The thread to create. Thread must contain at least one comment.
        - id: repositoryId
          type: string
          description: Repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestCommentThread" />&gt;
  - name: 'deleteAttachment(string, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.deleteAttachment
    package: azure-devops-extension-api
    summary: Delete a pull request attachment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteAttachment(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string): Promise<void>
      parameters:
        - id: fileName
          type: string
          description: The name of the attachment to delete.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteComment(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.deleteComment
    package: azure-devops-extension-api
    summary: Delete a comment associated with a specific thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type: number
          description: ID of the comment.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteLike(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.deleteLike
    package: azure-devops-extension-api
    summary: Delete a like on a comment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteLike(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type: number
          description: The ID of the comment.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deletePullRequestIterationStatus(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.deletePullRequestIterationStatus
    package: azure-devops-extension-api
    summary: Delete pull request iteration status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deletePullRequestIterationStatus(repositoryId: string,
        pullRequestId: number, iterationId: number, statusId: number, project?:
        string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration.
        - id: statusId
          type: number
          description: ID of the pull request status.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deletePullRequestLabels(string, number, string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.deletePullRequestLabels
    package: azure-devops-extension-api
    summary: Removes a label from the set of those assigned to the pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deletePullRequestLabels(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string):
        Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: labelIdOrName
          type: string
          description: The name or ID of the label requested.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: |
            Project ID or project name.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deletePullRequestReviewer(string, number, string, string)'
    uid: azure-devops-extension-api.GitRestClient.deletePullRequestReviewer
    package: azure-devops-extension-api
    summary: Remove a reviewer from a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deletePullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: reviewerId
          type: string
          description: ID of the reviewer to remove.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deletePullRequestStatus(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.deletePullRequestStatus
    package: azure-devops-extension-api
    summary: Delete pull request status.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deletePullRequestStatus(repositoryId: string, pullRequestId:
        number, statusId: number, project?: string): Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: statusId
          type: number
          description: ID of the pull request status.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteRefFavorite(string, number)'
    uid: azure-devops-extension-api.GitRestClient.deleteRefFavorite
    package: azure-devops-extension-api
    summary: Deletes the refs favorite specified
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRefFavorite(project: string, favoriteId: number):
        Promise<void>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: favoriteId
          type: number
          description: |
            The Id of the ref favorite to delete.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteRepository(string, string)'
    uid: azure-devops-extension-api.GitRestClient.deleteRepository
    package: azure-devops-extension-api
    summary: Delete a git repository
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRepository(repositoryId: string, project?: string):
        Promise<void>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'deleteRepositoryFromRecycleBin(string, string)'
    uid: azure-devops-extension-api.GitRestClient.deleteRepositoryFromRecycleBin
    package: azure-devops-extension-api
    summary: Destroy (hard delete) a soft-deleted Git repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function deleteRepositoryFromRecycleBin(project: string, repositoryId:
        string): Promise<void>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            The ID of the repository.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'getAnnotatedTag(string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getAnnotatedTag
    package: azure-devops-extension-api
    summary: Get an annotated tag.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAnnotatedTag(project: string, repositoryId: string,
        objectId: string): Promise<GitAnnotatedTag>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: objectId
          type: string
          description: |
            ObjectId (Sha1Id) of tag to get.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitAnnotatedTag"
          />&gt;
  - name: 'getAttachmentContent(string, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getAttachmentContent
    package: azure-devops-extension-api
    summary: Get the file content of a pull request attachment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAttachmentContent(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string): Promise<ArrayBuffer>
      parameters:
        - id: fileName
          type: string
          description: The name of the attachment.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getAttachments(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getAttachments
    package: azure-devops-extension-api
    summary: Get a list of files attached to a given pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAttachments(repositoryId: string, pullRequestId: number,
        project?: string): Promise<Attachment[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.Attachment" />[]&gt;'
  - name: 'getAttachmentZip(string, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getAttachmentZip
    package: azure-devops-extension-api
    summary: Get the file content of a pull request attachment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getAttachmentZip(fileName: string, repositoryId: string,
        pullRequestId: number, project?: string): Promise<ArrayBuffer>
      parameters:
        - id: fileName
          type: string
          description: The name of the attachment.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getBlob(string, string, string, boolean, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getBlob
    package: azure-devops-extension-api
    summary: Get a single blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlob(repositoryId: string, sha1: string, project?: string,
        download?: boolean, fileName?: string, resolveLfs?: boolean):
        Promise<GitBlobRef>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: sha1
          type: string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type: string
          description: Project ID or project name
        - id: download
          type: boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
        - id: fileName
          type: string
          description: Provide a fileName to use for a download.
        - id: resolveLfs
          type: boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitBlobRef" />&gt;
  - name: 'getBlobContent(string, string, string, boolean, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getBlobContent
    package: azure-devops-extension-api
    summary: Get a single blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobContent(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string, resolveLfs?: boolean):
        Promise<ArrayBuffer>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: sha1
          type: string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type: string
          description: Project ID or project name
        - id: download
          type: boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
        - id: fileName
          type: string
          description: Provide a fileName to use for a download.
        - id: resolveLfs
          type: boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getBlobsZip(string[], string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getBlobsZip
    package: azure-devops-extension-api
    summary: Gets one or more blobs in a zip file download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobsZip(blobIds: string[], repositoryId: string, project?:
        string, filename?: string): Promise<ArrayBuffer>
      parameters:
        - id: blobIds
          type: 'string[]'
          description: Blob IDs (SHA1 hashes) to be returned in the zip file.
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: filename
          type: string
          description: |
            -
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getBlobZip(string, string, string, boolean, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getBlobZip
    package: azure-devops-extension-api
    summary: Get a single blob.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBlobZip(repositoryId: string, sha1: string, project?:
        string, download?: boolean, fileName?: string, resolveLfs?: boolean):
        Promise<ArrayBuffer>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: sha1
          type: string
          description: >-
            SHA1 hash of the file. You can get the SHA1 of a file using the
            "Git/Items/Get Item" endpoint.
        - id: project
          type: string
          description: Project ID or project name
        - id: download
          type: boolean
          description: >-
            If true, prompt for a download rather than rendering in a browser.
            Note: this value defaults to true if $format is zip
        - id: fileName
          type: string
          description: Provide a fileName to use for a download.
        - id: resolveLfs
          type: boolean
          description: >
            If true, try to resolve a blob to its LFS contents, if it's an LFS
            pointer file. Only compatible with octet-stream Accept headers or
            $format types
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getBranch(string, string, string, GitVersionDescriptor)'
    uid: azure-devops-extension-api.GitRestClient.getBranch
    package: azure-devops-extension-api
    summary: Retrieve statistics about a single branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBranch(repositoryId: string, name: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor): Promise<GitBranchStats>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: name
          type: string
          description: Name of the branch.
        - id: project
          type: string
          description: Project ID or project name
        - id: baseVersionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: |
            Identifies the commit or branch to use as the base.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitBranchStats"
          />&gt;
  - name: 'getBranches(string, string, GitVersionDescriptor)'
    uid: azure-devops-extension-api.GitRestClient.getBranches
    package: azure-devops-extension-api
    summary: Retrieve statistics about all branches within a repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBranches(repositoryId: string, project?: string,
        baseVersionDescriptor?: GitVersionDescriptor): Promise<GitBranchStats[]>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: baseVersionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: |
            Identifies the commit or branch to use as the base.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitBranchStats"
          />[]&gt;
  - name: 'getBranchStatsBatch(GitQueryBranchStatsCriteria, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getBranchStatsBatch
    package: azure-devops-extension-api
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getBranchStatsBatch(searchCriteria:
        GitQueryBranchStatsCriteria, repositoryId: string, project?: string):
        Promise<GitBranchStats[]>
      parameters:
        - id: searchCriteria
          type: >-
            <xref uid="azure-devops-extension-api.GitQueryBranchStatsCriteria"
            />
          description: '-'
        - id: repositoryId
          type: string
          description: '-'
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitBranchStats"
          />[]&gt;
  - name: 'getChanges(string, string, string, number, number)'
    uid: azure-devops-extension-api.GitRestClient.getChanges
    package: azure-devops-extension-api
    summary: Retrieve changes for a particular commit.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getChanges(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number): Promise<GitCommitChanges>
      parameters:
        - id: commitId
          type: string
          description: The id of the commit.
        - id: repositoryId
          type: string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type: string
          description: Project ID or project name
        - id: top
          type: number
          description: The maximum number of changes to return.
        - id: skip
          type: number
          description: |
            The number of changes to skip.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitChanges"
          />&gt;
  - name: 'getCherryPick(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getCherryPick
    package: azure-devops-extension-api
    summary: Retrieve information about a cherry pick by cherry pick Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCherryPick(project: string, cherryPickId: number,
        repositoryId: string): Promise<GitCherryPick>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: cherryPickId
          type: number
          description: ID of the cherry pick.
        - id: repositoryId
          type: string
          description: |
            ID of the repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitCherryPick" />&gt;
  - name: 'getCherryPickForRefName(string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getCherryPickForRefName
    package: azure-devops-extension-api
    summary: Retrieve information about a cherry pick for a specific branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCherryPickForRefName(project: string, repositoryId: string,
        refName: string): Promise<GitCherryPick>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: ID of the repository.
        - id: refName
          type: string
          description: >
            The GitAsyncRefOperationParameters generatedRefName used for the
            cherry pick operation.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitCherryPick" />&gt;
  - name: 'getCherryPickRelationships(string, string, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getCherryPickRelationships
    package: azure-devops-extension-api
    summary: >-
      Given a commitId, returns a list of commits that are in the same
      cherry-pick family.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCherryPickRelationships(repositoryNameOrId: string,
        commitId: string, project?: string, includeLinks?: boolean):
        Promise<GitCommitRef[]>
      parameters:
        - id: repositoryNameOrId
          type: string
          description: '-'
        - id: commitId
          type: string
          description: '-'
        - id: project
          type: string
          description: Project ID or project name
        - id: includeLinks
          type: boolean
          description: |
            -
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: 'getComment(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getComment
    package: azure-devops-extension-api
    summary: Retrieve a comment associated with a specific thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getComment(repositoryId: string, pullRequestId: number,
        threadId: number, commentId: number, project?: string): Promise<Comment>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type: number
          description: ID of the comment.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.Comment" />&gt;
  - name: 'getComments(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getComments
    package: azure-devops-extension-api
    summary: Retrieve all comments associated with a specific thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getComments(repositoryId: string, pullRequestId: number,
        threadId: number, project?: string): Promise<Comment[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.Comment" />[]&gt;'
  - name: 'getCommit(string, string, string, number)'
    uid: azure-devops-extension-api.GitRestClient.getCommit
    package: azure-devops-extension-api
    summary: Retrieve a particular commit.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCommit(commitId: string, repositoryId: string, project?:
        string, changeCount?: number): Promise<GitCommit>
      parameters:
        - id: commitId
          type: string
          description: The id of the commit.
        - id: repositoryId
          type: string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: project
          type: string
          description: Project ID or project name
        - id: changeCount
          type: number
          description: |
            The number of changes to include in the result.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitCommit" />&gt;
  - name: >-
      getCommitDiffs(string, string, boolean, number, number,
      GitBaseVersionDescriptor, GitTargetVersionDescriptor)
    uid: azure-devops-extension-api.GitRestClient.getCommitDiffs
    package: azure-devops-extension-api
    summary: >-
      Find the closest common commit (the merge base) between base and target
      commits, and get the diff between either the base and target commits or
      common and target commits.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCommitDiffs(repositoryId: string, project?: string,
        diffCommonCommit?: boolean, top?: number, skip?: number,
        baseVersionDescriptor?: GitBaseVersionDescriptor,
        targetVersionDescriptor?: GitTargetVersionDescriptor):
        Promise<GitCommitDiffs>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: diffCommonCommit
          type: boolean
          description: >-
            If true, diff between common and target commits. If false, diff
            between base and target commits.
        - id: top
          type: number
          description: Maximum number of changes to return. Defaults to 100.
        - id: skip
          type: number
          description: Number of changes to skip
        - id: baseVersionDescriptor
          type: <xref uid="azure-devops-extension-api.GitBaseVersionDescriptor" />
          description: Descriptor for base commit.
        - id: targetVersionDescriptor
          type: <xref uid="azure-devops-extension-api.GitTargetVersionDescriptor" />
          description: |
            Descriptor for target commit.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitDiffs"
          />&gt;
  - name: 'getCommits(string, GitQueryCommitsCriteria, string)'
    uid: azure-devops-extension-api.GitRestClient.getCommits
    package: azure-devops-extension-api
    summary: Retrieve git commits for a project
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCommits(repositoryId: string, searchCriteria:
        GitQueryCommitsCriteria, project?: string): Promise<GitCommitRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: searchCriteria
          type: <xref uid="azure-devops-extension-api.GitQueryCommitsCriteria" />
          description: '-'
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: >-
      getCommitsBatch(GitQueryCommitsCriteria, string, string, number, number,
      boolean)
    uid: azure-devops-extension-api.GitRestClient.getCommitsBatch
    package: azure-devops-extension-api
    summary: Retrieve git commits for a project matching the search criteria
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getCommitsBatch(searchCriteria: GitQueryCommitsCriteria,
        repositoryId: string, project?: string, skip?: number, top?: number,
        includeStatuses?: boolean): Promise<GitCommitRef[]>
      parameters:
        - id: searchCriteria
          type: <xref uid="azure-devops-extension-api.GitQueryCommitsCriteria" />
          description: Search options
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: skip
          type: number
          description: Number of commits to skip.
        - id: top
          type: number
          description: Maximum number of commits to return.
        - id: includeStatuses
          type: boolean
          description: |
            True to include additional commit status information.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: getDeletedRepositories(string)
    uid: azure-devops-extension-api.GitRestClient.getDeletedRepositories
    package: azure-devops-extension-api
    summary: Retrieve deleted git repositories.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getDeletedRepositories(project: string):
        Promise<GitDeletedRepository[]>
      parameters:
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitDeletedRepository"
          />[]&gt;
  - name: 'getFileDiffs(FileDiffsCriteria, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getFileDiffs
    package: azure-devops-extension-api
    summary: Get the file diffs for each of the specified files
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getFileDiffs(fileDiffsCriteria: FileDiffsCriteria, project:
        string, repositoryId: string): Promise<FileDiff[]>
      parameters:
        - id: fileDiffsCriteria
          type: <xref uid="azure-devops-extension-api.FileDiffsCriteria" />
          description: List of file parameters objects
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            The name or ID of the repository
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.FileDiff" />[]&gt;'
  - name: 'getForks(string, string, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getForks
    package: azure-devops-extension-api
    summary: Retrieve all forks of a repository in the collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getForks(repositoryNameOrId: string, collectionId: string,
        project?: string, includeLinks?: boolean): Promise<GitRepositoryRef[]>
      parameters:
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: collectionId
          type: string
          description: Team project collection ID.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeLinks
          type: boolean
          description: |
            True to include links.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRepositoryRef"
          />[]&gt;
  - name: 'getForkSyncRequest(string, number, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getForkSyncRequest
    package: azure-devops-extension-api
    summary: Get a specific fork sync operation's details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getForkSyncRequest(repositoryNameOrId: string,
        forkSyncOperationId: number, project?: string, includeLinks?: boolean):
        Promise<GitForkSyncRequest>
      parameters:
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: forkSyncOperationId
          type: number
          description: OperationId of the sync request.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeLinks
          type: boolean
          description: |
            True to include links.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitForkSyncRequest"
          />&gt;
  - name: 'getForkSyncRequests(string, string, boolean, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getForkSyncRequests
    package: azure-devops-extension-api
    summary: Retrieve all requested fork sync operations on this repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getForkSyncRequests(repositoryNameOrId: string, project?:
        string, includeAbandoned?: boolean, includeLinks?: boolean):
        Promise<GitForkSyncRequest[]>
      parameters:
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeAbandoned
          type: boolean
          description: True to include abandoned requests.
        - id: includeLinks
          type: boolean
          description: |
            True to include links.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitForkSyncRequest"
          />[]&gt;
  - name: 'getImportRequest(string, string, number)'
    uid: azure-devops-extension-api.GitRestClient.getImportRequest
    package: azure-devops-extension-api
    summary: Retrieve a particular import request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getImportRequest(project: string, repositoryId: string,
        importRequestId: number): Promise<GitImportRequest>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: importRequestId
          type: number
          description: |
            The unique identifier for the import request.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitImportRequest"
          />&gt;
  - name: >-
      getItem(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    uid: azure-devops-extension-api.GitRestClient.getItem
    package: azure-devops-extension-api
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItem(repositoryId: string, path: string, project?: string,
        scopePath?: string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, versionDescriptor?: GitVersionDescriptor,
        includeContent?: boolean, resolveLfs?: boolean): Promise<GitItem>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: path
          type: string
          description: The item path.
        - id: project
          type: string
          description: Project ID or project name
        - id: scopePath
          type: string
          description: The path scope.  The default is null.
        - id: recursionLevel
          type: >-
            <xref uid="azure-devops-extension-api.VersionControlRecursionType"
            />
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
        - id: includeContentMetadata
          type: boolean
          description: Set to true to include content metadata.  Default is false.
        - id: latestProcessedChange
          type: boolean
          description: Set to true to include the latest changes.  Default is false.
        - id: download
          type: boolean
          description: Set to true to download the response as a file.  Default is false.
        - id: versionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: >-
            Version descriptor.  Default is the default branch for the
            repository.
        - id: includeContent
          type: boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
        - id: resolveLfs
          type: boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitItem" />&gt;
  - name: >-
      getItemContent(string, string, string, string,
      VersionControlRecursionType, boolean, boolean, boolean,
      GitVersionDescriptor, boolean, boolean)
    uid: azure-devops-extension-api.GitRestClient.getItemContent
    package: azure-devops-extension-api
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItemContent(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean):
        Promise<ArrayBuffer>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: path
          type: string
          description: The item path.
        - id: project
          type: string
          description: Project ID or project name
        - id: scopePath
          type: string
          description: The path scope.  The default is null.
        - id: recursionLevel
          type: >-
            <xref uid="azure-devops-extension-api.VersionControlRecursionType"
            />
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
        - id: includeContentMetadata
          type: boolean
          description: Set to true to include content metadata.  Default is false.
        - id: latestProcessedChange
          type: boolean
          description: Set to true to include the latest changes.  Default is false.
        - id: download
          type: boolean
          description: Set to true to download the response as a file.  Default is false.
        - id: versionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: >-
            Version descriptor.  Default is the default branch for the
            repository.
        - id: includeContent
          type: boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
        - id: resolveLfs
          type: boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: >-
      getItems(string, string, string, VersionControlRecursionType, boolean,
      boolean, boolean, boolean, GitVersionDescriptor)
    uid: azure-devops-extension-api.GitRestClient.getItems
    package: azure-devops-extension-api
    summary: >-
      Get Item Metadata and/or Content for a collection of items. The download
      parameter is to indicate whether the content should be available as a
      download or just sent as a stream in the response. Doesn't apply to zipped
      content which is always returned as a download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItems(repositoryId: string, project?: string, scopePath?:
        string, recursionLevel?: VersionControlRecursionType,
        includeContentMetadata?: boolean, latestProcessedChange?: boolean,
        download?: boolean, includeLinks?: boolean, versionDescriptor?:
        GitVersionDescriptor): Promise<GitItem[]>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: scopePath
          type: string
          description: The path scope.  The default is null.
        - id: recursionLevel
          type: >-
            <xref uid="azure-devops-extension-api.VersionControlRecursionType"
            />
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
        - id: includeContentMetadata
          type: boolean
          description: Set to true to include content metadata.  Default is false.
        - id: latestProcessedChange
          type: boolean
          description: Set to true to include the latest changes.  Default is false.
        - id: download
          type: boolean
          description: Set to true to download the response as a file.  Default is false.
        - id: includeLinks
          type: boolean
          description: Set to true to include links to items.  Default is false.
        - id: versionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: >
            Version descriptor.  Default is the default branch for the
            repository.
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitItem" />[]&gt;'
  - name: 'getItemsBatch(GitItemRequestData, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getItemsBatch
    package: azure-devops-extension-api
    summary: >-
      Post for retrieving a creating a batch out of a set of items in a repo /
      project given a list of paths or a long path
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItemsBatch(requestData: GitItemRequestData, repositoryId:
        string, project?: string): Promise<GitItem[][]>
      parameters:
        - id: requestData
          type: <xref uid="azure-devops-extension-api.GitItemRequestData" />
          description: >-
            Request data attributes: ItemDescriptors, IncludeContentMetadata,
            LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of
            items to fetch, including path, version, and recursion level.
            IncludeContentMetadata: Whether to include metadata for all items
            LatestProcessedChange: Whether to include shallow ref to commit that
            last changed each item. IncludeLinks: Whether to include the _links
            field on the shallow references.
        - id: repositoryId
          type: string
          description: The name or ID of the repository
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitItem" />[][]&gt;'
  - name: >-
      getItemText(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    uid: azure-devops-extension-api.GitRestClient.getItemText
    package: azure-devops-extension-api
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItemText(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean):
        Promise<string>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: path
          type: string
          description: The item path.
        - id: project
          type: string
          description: Project ID or project name
        - id: scopePath
          type: string
          description: The path scope.  The default is null.
        - id: recursionLevel
          type: >-
            <xref uid="azure-devops-extension-api.VersionControlRecursionType"
            />
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
        - id: includeContentMetadata
          type: boolean
          description: Set to true to include content metadata.  Default is false.
        - id: latestProcessedChange
          type: boolean
          description: Set to true to include the latest changes.  Default is false.
        - id: download
          type: boolean
          description: Set to true to download the response as a file.  Default is false.
        - id: versionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: >-
            Version descriptor.  Default is the default branch for the
            repository.
        - id: includeContent
          type: boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
        - id: resolveLfs
          type: boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
      return:
        description: ''
        type: Promise&lt;string&gt;
  - name: >-
      getItemZip(string, string, string, string, VersionControlRecursionType,
      boolean, boolean, boolean, GitVersionDescriptor, boolean, boolean)
    uid: azure-devops-extension-api.GitRestClient.getItemZip
    package: azure-devops-extension-api
    summary: >-
      Get Item Metadata and/or Content for a single item. The download parameter
      is to indicate whether the content should be available as a download or
      just sent as a stream in the response. Doesn't apply to zipped content,
      which is always returned as a download.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getItemZip(repositoryId: string, path: string, project?:
        string, scopePath?: string, recursionLevel?:
        VersionControlRecursionType, includeContentMetadata?: boolean,
        latestProcessedChange?: boolean, download?: boolean, versionDescriptor?:
        GitVersionDescriptor, includeContent?: boolean, resolveLfs?: boolean):
        Promise<ArrayBuffer>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: path
          type: string
          description: The item path.
        - id: project
          type: string
          description: Project ID or project name
        - id: scopePath
          type: string
          description: The path scope.  The default is null.
        - id: recursionLevel
          type: >-
            <xref uid="azure-devops-extension-api.VersionControlRecursionType"
            />
          description: >-
            The recursion level of this request. The default is 'none', no
            recursion.
        - id: includeContentMetadata
          type: boolean
          description: Set to true to include content metadata.  Default is false.
        - id: latestProcessedChange
          type: boolean
          description: Set to true to include the latest changes.  Default is false.
        - id: download
          type: boolean
          description: Set to true to download the response as a file.  Default is false.
        - id: versionDescriptor
          type: <xref uid="azure-devops-extension-api.GitVersionDescriptor" />
          description: >-
            Version descriptor.  Default is the default branch for the
            repository.
        - id: includeContent
          type: boolean
          description: >-
            Set to true to include item content when requesting json.  Default
            is false.
        - id: resolveLfs
          type: boolean
          description: >
            Set to true to resolve Git LFS pointer files to return actual
            content from Git LFS.  Default is false.
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'getLikes(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getLikes
    package: azure-devops-extension-api
    summary: Get likes for a comment.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getLikes(repositoryId: string, pullRequestId: number, threadId:
        number, commentId: number, project?: string): Promise<IdentityRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: The ID of the thread that contains the comment.
        - id: commentId
          type: number
          description: The ID of the comment.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.IdentityRef" />[]&gt;'
  - name: 'getMergeBases(string, string, string, string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getMergeBases
    package: azure-devops-extension-api
    summary: >-
      Find the merge bases of two commits, optionally across forks. If
      otherRepositoryId is not specified, the merge bases will only be
      calculated within the context of the local repositoryNameOrId.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMergeBases(repositoryNameOrId: string, commitId: string,
        otherCommitId: string, project?: string, otherCollectionId?: string,
        otherRepositoryId?: string): Promise<GitCommitRef[]>
      parameters:
        - id: repositoryNameOrId
          type: string
          description: ID or name of the local repository.
        - id: commitId
          type: string
          description: >-
            First commit, usually the tip of the target branch of the potential
            merge.
        - id: otherCommitId
          type: string
          description: >-
            Other commit, usually the tip of the source branch of the potential
            merge.
        - id: project
          type: string
          description: Project ID or project name
        - id: otherCollectionId
          type: string
          description: The collection ID where otherCommitId lives.
        - id: otherRepositoryId
          type: string
          description: |
            The repository ID where otherCommitId lives.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: 'getMergeRequest(string, string, number, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getMergeRequest
    package: azure-devops-extension-api
    summary: Get a specific merge operation's details.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getMergeRequest(project: string, repositoryNameOrId: string,
        mergeOperationId: number, includeLinks?: boolean): Promise<GitMerge>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryNameOrId
          type: string
          description: The name or ID of the repository.
        - id: mergeOperationId
          type: number
          description: OperationId of the merge request.
        - id: includeLinks
          type: boolean
          description: |
            True to include links
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitMerge" />&gt;
  - name: >-
      getPullRequest(string, number, string, number, number, number, boolean,
      boolean)
    uid: azure-devops-extension-api.GitRestClient.getPullRequest
    package: azure-devops-extension-api
    summary: Retrieve a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequest(repositoryId: string, pullRequestId: number,
        project?: string, maxCommentLength?: number, skip?: number, top?:
        number, includeCommits?: boolean, includeWorkItemRefs?: boolean):
        Promise<GitPullRequest>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: The ID of the pull request to retrieve.
        - id: project
          type: string
          description: Project ID or project name
        - id: maxCommentLength
          type: number
          description: Not used.
        - id: skip
          type: number
          description: Not used.
        - id: top
          type: number
          description: Not used.
        - id: includeCommits
          type: boolean
          description: >-
            If true, the pull request will be returned with the associated
            commits.
        - id: includeWorkItemRefs
          type: boolean
          description: >
            If true, the pull request will be returned with the associated work
            item references.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />&gt;
  - name: 'getPullRequestById(number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestById
    package: azure-devops-extension-api
    summary: Retrieve a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestById(pullRequestId: number, project?: string):
        Promise<GitPullRequest>
      parameters:
        - id: pullRequestId
          type: number
          description: The ID of the pull request to retrieve.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />&gt;
  - name: 'getPullRequestCommits(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestCommits
    package: azure-devops-extension-api
    summary: Get the commits for the specified pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestCommits(repositoryId: string, pullRequestId:
        number, project?: string): Promise<GitCommitRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: 'getPullRequestConflict(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestConflict
    package: azure-devops-extension-api
    summary: Retrieve one conflict for a pull request by ID
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestConflict(repositoryId: string, pullRequestId:
        number, conflictId: number, project?: string): Promise<GitConflict>
      parameters:
        - id: repositoryId
          type: string
          description: '-'
        - id: pullRequestId
          type: number
          description: '-'
        - id: conflictId
          type: number
          description: '-'
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitConflict" />&gt;
  - name: >-
      getPullRequestConflicts(string, number, string, number, number, boolean,
      boolean, boolean)
    uid: azure-devops-extension-api.GitRestClient.getPullRequestConflicts
    package: azure-devops-extension-api
    summary: Retrieve all conflicts for a pull request
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestConflicts(repositoryId: string, pullRequestId:
        number, project?: string, skip?: number, top?: number, includeObsolete?:
        boolean, excludeResolved?: boolean, onlyResolved?: boolean):
        Promise<GitConflict[]>
      parameters:
        - id: repositoryId
          type: string
          description: '-'
        - id: pullRequestId
          type: number
          description: '-'
        - id: project
          type: string
          description: Project ID or project name
        - id: skip
          type: number
          description: '-'
        - id: top
          type: number
          description: '-'
        - id: includeObsolete
          type: boolean
          description: '-'
        - id: excludeResolved
          type: boolean
          description: '-'
        - id: onlyResolved
          type: boolean
          description: |
            -
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitConflict" />[]&gt;'
  - name: 'getPullRequestIteration(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIteration
    package: azure-devops-extension-api
    summary: Get the specified iteration for a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIteration(repositoryId: string, pullRequestId:
        number, iterationId: number, project?: string):
        Promise<GitPullRequestIteration>
      parameters:
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration to return.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestIteration" />&gt;
  - name: >-
      getPullRequestIterationChanges(string, number, number, string, number,
      number, number)
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIterationChanges
    package: azure-devops-extension-api
    summary: Retrieve the changes made in a pull request between two iterations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIterationChanges(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string, top?:
        number, skip?: number, compareTo?: number):
        Promise<GitPullRequestIterationChanges>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: >-
            ID of the pull request iteration. \<br /\> Iteration IDs are
            zero-based with zero indicating the common commit between the source
            and target branches. Iteration one is the head of the source branch
            at the time the pull request is created and subsequent iterations
            are created when there are pushes to the source branch.
        - id: project
          type: string
          description: Project ID or project name
        - id: top
          type: number
          description: >-
            Optional. The number of changes to retrieve.  The default value is
            100 and the maximum value is 2000.
        - id: skip
          type: number
          description: >-
            Optional. The number of changes to ignore.  For example, to retrieve
            changes 101-150, set top 50 and skip to 100.
        - id: compareTo
          type: number
          description: >
            ID of the pull request iteration to compare against.  The default
            value is zero which indicates the comparison is made against the
            common commit between the source and target branches
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestIterationChanges" />&gt;
  - name: >-
      getPullRequestIterationCommits(string, number, number, string, number,
      number)
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIterationCommits
    package: azure-devops-extension-api
    summary: Get the commits for the specified iteration of a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIterationCommits(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string, top?:
        number, skip?: number): Promise<GitCommitRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the iteration from which to get the commits.
        - id: project
          type: string
          description: Project ID or project name
        - id: top
          type: number
          description: >-
            Maximum number of commits to return. The maximum number of commits
            that can be returned per batch is 500.
        - id: skip
          type: number
          description: |
            Number of commits to skip.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: 'getPullRequestIterations(string, number, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIterations
    package: azure-devops-extension-api
    summary: Get the list of iterations for the specified pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIterations(repositoryId: string, pullRequestId:
        number, project?: string, includeCommits?: boolean):
        Promise<GitPullRequestIteration[]>
      parameters:
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeCommits
          type: boolean
          description: >
            If true, include the commits associated with each iteration in the
            response.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestIteration" />[]&gt;
  - name: 'getPullRequestIterationStatus(string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIterationStatus
    package: azure-devops-extension-api
    summary: >-
      Get the specific pull request iteration status by ID. The status ID is
      unique within the pull request across all iterations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIterationStatus(repositoryId: string,
        pullRequestId: number, iterationId: number, statusId: number, project?:
        string): Promise<GitPullRequestStatus>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration.
        - id: statusId
          type: number
          description: ID of the pull request status.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />&gt;
  - name: 'getPullRequestIterationStatuses(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestIterationStatuses
    package: azure-devops-extension-api
    summary: Get all the statuses associated with a pull request iteration.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestIterationStatuses(repositoryId: string,
        pullRequestId: number, iterationId: number, project?: string):
        Promise<GitPullRequestStatus[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />[]&gt;
  - name: 'getPullRequestLabel(string, number, string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestLabel
    package: azure-devops-extension-api
    summary: Retrieves a single label that has been assigned to a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestLabel(repositoryId: string, pullRequestId:
        number, labelIdOrName: string, project?: string, projectId?: string):
        Promise<WebApiTagDefinition>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: labelIdOrName
          type: string
          description: The name or ID of the label requested.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: |
            Project ID or project name.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.WebApiTagDefinition"
          />&gt;
  - name: 'getPullRequestLabels(string, number, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestLabels
    package: azure-devops-extension-api
    summary: Get all the labels assigned to a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestLabels(repositoryId: string, pullRequestId:
        number, project?: string, projectId?: string):
        Promise<WebApiTagDefinition[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: |
            Project ID or project name.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.WebApiTagDefinition"
          />[]&gt;
  - name: 'getPullRequestProperties(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestProperties
    package: azure-devops-extension-api
    summary: Get external properties of the pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestProperties(repositoryId: string, pullRequestId:
        number, project?: string): Promise<any>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;any&gt;
  - name: 'getPullRequestQuery(GitPullRequestQuery, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestQuery
    package: azure-devops-extension-api
    summary: >-
      This API is used to find what pull requests are related to a given
      commit.  It can be used to either find the pull request that created a
      particular merge commit or it can be used to find all pull requests that
      have ever merged a particular commit.  The input is a list of queries
      which each contain a list of commits. For each commit that you search
      against, you will get back a dictionary of commit -\> pull requests.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestQuery(queries: GitPullRequestQuery, repositoryId:
        string, project?: string): Promise<GitPullRequestQuery>
      parameters:
        - id: queries
          type: <xref uid="azure-devops-extension-api.GitPullRequestQuery" />
          description: The list of queries to perform.
        - id: repositoryId
          type: string
          description: ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestQuery"
          />&gt;
  - name: 'getPullRequestReviewer(string, number, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestReviewer
    package: azure-devops-extension-api
    summary: Retrieve information about a particular reviewer on a pull request
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestReviewer(repositoryId: string, pullRequestId:
        number, reviewerId: string, project?: string):
        Promise<IdentityRefWithVote>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: reviewerId
          type: string
          description: ID of the reviewer.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.IdentityRefWithVote"
          />&gt;
  - name: 'getPullRequestReviewers(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestReviewers
    package: azure-devops-extension-api
    summary: Retrieve the reviewers for a pull request
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestReviewers(repositoryId: string, pullRequestId:
        number, project?: string): Promise<IdentityRefWithVote[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.IdentityRefWithVote"
          />[]&gt;
  - name: >-
      getPullRequests(string, GitPullRequestSearchCriteria, string, number,
      number, number)
    uid: azure-devops-extension-api.GitRestClient.getPullRequests
    package: azure-devops-extension-api
    summary: Retrieve all pull requests matching a specified criteria.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequests(repositoryId: string, searchCriteria:
        GitPullRequestSearchCriteria, project?: string, maxCommentLength?:
        number, skip?: number, top?: number): Promise<GitPullRequest[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: searchCriteria
          type: >-
            <xref uid="azure-devops-extension-api.GitPullRequestSearchCriteria"
            />
          description: Pull requests will be returned that match this search criteria.
        - id: project
          type: string
          description: Project ID or project name
        - id: maxCommentLength
          type: number
          description: Not used.
        - id: skip
          type: number
          description: >-
            The number of pull requests to ignore. For example, to retrieve
            results 101-150, set top to 50 and skip to 100.
        - id: top
          type: number
          description: |
            The number of pull requests to retrieve.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />[]&gt;
  - name: >-
      getPullRequestsByProject(string, GitPullRequestSearchCriteria, number,
      number, number)
    uid: azure-devops-extension-api.GitRestClient.getPullRequestsByProject
    package: azure-devops-extension-api
    summary: Retrieve all pull requests matching a specified criteria.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestsByProject(project: string, searchCriteria:
        GitPullRequestSearchCriteria, maxCommentLength?: number, skip?: number,
        top?: number): Promise<GitPullRequest[]>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: searchCriteria
          type: >-
            <xref uid="azure-devops-extension-api.GitPullRequestSearchCriteria"
            />
          description: Pull requests will be returned that match this search criteria.
        - id: maxCommentLength
          type: number
          description: Not used.
        - id: skip
          type: number
          description: >-
            The number of pull requests to ignore. For example, to retrieve
            results 101-150, set top to 50 and skip to 100.
        - id: top
          type: number
          description: |
            The number of pull requests to retrieve.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />[]&gt;
  - name: 'getPullRequestStatus(string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestStatus
    package: azure-devops-extension-api
    summary: >-
      Get the specific pull request status by ID. The status ID is unique within
      the pull request across all iterations.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestStatus(repositoryId: string, pullRequestId:
        number, statusId: number, project?: string):
        Promise<GitPullRequestStatus>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: statusId
          type: number
          description: ID of the pull request status.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />&gt;
  - name: 'getPullRequestStatuses(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestStatuses
    package: azure-devops-extension-api
    summary: Get all the statuses associated with a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestStatuses(repositoryId: string, pullRequestId:
        number, project?: string): Promise<GitPullRequestStatus[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequestStatus"
          />[]&gt;
  - name: 'getPullRequestThread(string, number, number, string, number, number)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestThread
    package: azure-devops-extension-api
    summary: Retrieve a thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestThread(repositoryId: string, pullRequestId:
        number, threadId: number, project?: string, iteration?: number,
        baseIteration?: number): Promise<GitPullRequestCommentThread>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread.
        - id: project
          type: string
          description: Project ID or project name
        - id: iteration
          type: number
          description: >-
            If specified, thread position will be tracked using this iteration
            as the right side of the diff.
        - id: baseIteration
          type: number
          description: >
            If specified, thread position will be tracked using this iteration
            as the left side of the diff.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestCommentThread" />&gt;
  - name: 'getPullRequestWorkItemRefs(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getPullRequestWorkItemRefs
    package: azure-devops-extension-api
    summary: Retrieve a list of work items associated with a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPullRequestWorkItemRefs(repositoryId: string, pullRequestId:
        number, project?: string): Promise<ResourceRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: ID or name of the repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.ResourceRef" />[]&gt;'
  - name: 'getPush(string, number, string, number, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getPush
    package: azure-devops-extension-api
    summary: Retrieves a particular push.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPush(repositoryId: string, pushId: number, project?: string,
        includeCommits?: number, includeRefUpdates?: boolean): Promise<GitPush>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: pushId
          type: number
          description: ID of the push.
        - id: project
          type: string
          description: Project ID or project name
        - id: includeCommits
          type: number
          description: The number of commits to include in the result.
        - id: includeRefUpdates
          type: boolean
          description: |
            If true, include the list of refs that were updated by the push.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitPush" />&gt;
  - name: 'getPushCommits(string, number, string, number, number, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getPushCommits
    package: azure-devops-extension-api
    summary: Retrieve a list of commits associated with a particular push.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPushCommits(repositoryId: string, pushId: number, project?:
        string, top?: number, skip?: number, includeLinks?: boolean):
        Promise<GitCommitRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: >-
            The id or friendly name of the repository. To use the friendly name,
            projectId must also be specified.
        - id: pushId
          type: number
          description: The id of the push.
        - id: project
          type: string
          description: Project ID or project name
        - id: top
          type: number
          description: The maximum number of commits to return ("get the top x commits").
        - id: skip
          type: number
          description: The number of commits to skip.
        - id: includeLinks
          type: boolean
          description: >
            Set to false to avoid including REST Url links for resources.
            Defaults to true.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitCommitRef"
          />[]&gt;
  - name: 'getPushes(string, string, number, number, GitPushSearchCriteria)'
    uid: azure-devops-extension-api.GitRestClient.getPushes
    package: azure-devops-extension-api
    summary: Retrieves pushes associated with the specified repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getPushes(repositoryId: string, project?: string, skip?:
        number, top?: number, searchCriteria?: GitPushSearchCriteria):
        Promise<GitPush[]>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: skip
          type: number
          description: Number of pushes to skip.
        - id: top
          type: number
          description: Number of pushes to return.
        - id: searchCriteria
          type: <xref uid="azure-devops-extension-api.GitPushSearchCriteria" />
          description: >
            Search criteria attributes: fromDate, toDate, pusherId, refName,
            includeRefUpdates or includeLinks. fromDate: Start date to search
            from. toDate: End date to search to. pusherId: Identity of the
            person who submitted the push. refName: Branch name to consider.
            includeRefUpdates: If true, include the list of refs that were
            updated by the push. includeLinks: Whether to include the _links
            field on the shallow references.
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitPush" />[]&gt;'
  - name: getRecycleBinRepositories(string)
    uid: azure-devops-extension-api.GitRestClient.getRecycleBinRepositories
    package: azure-devops-extension-api
    summary: Retrieve soft-deleted git repositories from the recycle bin.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRecycleBinRepositories(project: string):
        Promise<GitDeletedRepository[]>
      parameters:
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitDeletedRepository"
          />[]&gt;
  - name: 'getRefFavorite(string, number)'
    uid: azure-devops-extension-api.GitRestClient.getRefFavorite
    package: azure-devops-extension-api
    summary: Gets the refs favorite for a favorite Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRefFavorite(project: string, favoriteId: number):
        Promise<GitRefFavorite>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: favoriteId
          type: number
          description: |
            The Id of the requested ref favorite.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRefFavorite"
          />&gt;
  - name: 'getRefFavorites(string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getRefFavorites
    package: azure-devops-extension-api
    summary: Gets the refs favorites for a repo and an identity.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRefFavorites(project: string, repositoryId?: string,
        identityId?: string): Promise<GitRefFavorite[]>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: The id of the repository.
        - id: identityId
          type: string
          description: >
            The id of the identity whose favorites are to be retrieved. If null,
            the requesting identity is used.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRefFavorite"
          />[]&gt;
  - name: >-
      getRefs(string, string, string, boolean, boolean, boolean, boolean,
      boolean, string)
    uid: azure-devops-extension-api.GitRestClient.getRefs
    package: azure-devops-extension-api
    summary: Queries the provided repository for its refs and returns them.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRefs(repositoryId: string, project?: string, filter?:
        string, includeLinks?: boolean, includeStatuses?: boolean,
        includeMyBranches?: boolean, latestStatusesOnly?: boolean, peelTags?:
        boolean, filterContains?: string): Promise<GitRef[]>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: filter
          type: string
          description: '[optional] A filter to apply to the refs (starts with).'
        - id: includeLinks
          type: boolean
          description: >-
            [optional] Specifies if referenceLinks should be included in the
            result. default is false.
        - id: includeStatuses
          type: boolean
          description: >-
            [optional] Includes up to the first 1000 commit statuses for each
            ref. The default value is false.
        - id: includeMyBranches
          type: boolean
          description: >-
            [optional] Includes only branches that the user owns, the branches
            the user favorites, and the default branch. The default value is
            false. Cannot be combined with the filter parameter.
        - id: latestStatusesOnly
          type: boolean
          description: >-
            [optional] True to include only the tip commit status for each ref.
            This option requires \`includeStatuses\` to be true. The default
            value is false.
        - id: peelTags
          type: boolean
          description: >-
            [optional] Annotated tags will populate the PeeledObjectId property.
            default is false.
        - id: filterContains
          type: string
          description: |
            [optional] A filter to apply to the refs (contains).
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitRef" />[]&gt;'
  - name: 'getRepositories(string, boolean, boolean, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getRepositories
    package: azure-devops-extension-api
    summary: Retrieve git repositories.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRepositories(project?: string, includeLinks?: boolean,
        includeAllUrls?: boolean, includeHidden?: boolean):
        Promise<GitRepository[]>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: includeLinks
          type: boolean
          description: >-
            [optional] True to include reference links. The default value is
            false.
        - id: includeAllUrls
          type: boolean
          description: >-
            [optional] True to include all remote URLs. The default value is
            false.
        - id: includeHidden
          type: boolean
          description: >
            [optional] True to include hidden repositories. The default value is
            false.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRepository"
          />[]&gt;
  - name: 'getRepository(string, string)'
    uid: azure-devops-extension-api.GitRestClient.getRepository
    package: azure-devops-extension-api
    summary: Retrieve a git repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRepository(repositoryId: string, project?: string):
        Promise<GitRepository>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRepository" />&gt;
  - name: 'getRepositoryWithParent(string, boolean, string)'
    uid: azure-devops-extension-api.GitRestClient.getRepositoryWithParent
    package: azure-devops-extension-api
    summary: Retrieve a git repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRepositoryWithParent(repositoryId: string, includeParent:
        boolean, project?: string): Promise<GitRepository>
      parameters:
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: includeParent
          type: boolean
          description: >-
            True to include parent repository. Only available in authenticated
            calls.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRepository" />&gt;
  - name: 'getRevert(string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.getRevert
    package: azure-devops-extension-api
    summary: Retrieve information about a revert operation by revert Id.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRevert(project: string, revertId: number, repositoryId:
        string): Promise<GitRevert>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: revertId
          type: number
          description: ID of the revert operation.
        - id: repositoryId
          type: string
          description: |
            ID of the repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRevert" />&gt;
  - name: 'getRevertForRefName(string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.getRevertForRefName
    package: azure-devops-extension-api
    summary: Retrieve information about a revert operation for a specific branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getRevertForRefName(project: string, repositoryId: string,
        refName: string): Promise<GitRevert>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: ID of the repository.
        - id: refName
          type: string
          description: >
            The GitAsyncRefOperationParameters generatedRefName used for the
            revert operation.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRevert" />&gt;
  - name: 'getStatuses(string, string, string, number, number, boolean)'
    uid: azure-devops-extension-api.GitRestClient.getStatuses
    package: azure-devops-extension-api
    summary: Get statuses associated with the Git commit.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getStatuses(commitId: string, repositoryId: string, project?:
        string, top?: number, skip?: number, latestOnly?: boolean):
        Promise<GitStatus[]>
      parameters:
        - id: commitId
          type: string
          description: ID of the Git commit.
        - id: repositoryId
          type: string
          description: ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: top
          type: number
          description: Optional. The number of statuses to retrieve. Default is 1000.
        - id: skip
          type: number
          description: >-
            Optional. The number of statuses to ignore. Default is 0. For
            example, to retrieve results 101-150, set top to 50 and skip to 100.
        - id: latestOnly
          type: boolean
          description: >
            The flag indicates whether to get only latest statuses grouped by
            \`Context.Name\` and \`Context.Genre\`.
      return:
        description: ''
        type: 'Promise&lt;<xref uid="azure-devops-extension-api.GitStatus" />[]&gt;'
  - name: 'getSuggestions(string, string)'
    uid: azure-devops-extension-api.GitRestClient.getSuggestions
    package: azure-devops-extension-api
    summary: >-
      Retrieve a pull request suggestion for a particular repository or team
      project.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getSuggestions(repositoryId: string, project?: string):
        Promise<GitSuggestion[]>
      parameters:
        - id: repositoryId
          type: string
          description: ID of the git repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitSuggestion"
          />[]&gt;
  - name: 'getThreads(string, number, string, number, number)'
    uid: azure-devops-extension-api.GitRestClient.getThreads
    package: azure-devops-extension-api
    summary: Retrieve all threads in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getThreads(repositoryId: string, pullRequestId: number,
        project?: string, iteration?: number, baseIteration?: number):
        Promise<GitPullRequestCommentThread[]>
      parameters:
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: Project ID or project name
        - id: iteration
          type: number
          description: >-
            If specified, thread positions will be tracked using this iteration
            as the right side of the diff.
        - id: baseIteration
          type: number
          description: >
            If specified, thread positions will be tracked using this iteration
            as the left side of the diff.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestCommentThread" />[]&gt;
  - name: 'getTree(string, string, string, string, boolean, string)'
    uid: azure-devops-extension-api.GitRestClient.getTree
    package: azure-devops-extension-api
    summary: >-
      The Tree endpoint returns the collection of objects underneath the
      specified tree. Trees are folders in a Git repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTree(repositoryId: string, sha1: string, project?: string,
        projectId?: string, recursive?: boolean, fileName?: string):
        Promise<GitTreeRef>
      parameters:
        - id: repositoryId
          type: string
          description: Repository Id.
        - id: sha1
          type: string
          description: SHA1 hash of the tree object.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: Project Id.
        - id: recursive
          type: boolean
          description: >-
            Search recursively. Include trees underneath this tree. Default is
            false.
        - id: fileName
          type: string
          description: |
            Name to use if a .zip file is returned. Default is the object ID.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitTreeRef" />&gt;
  - name: 'getTreeZip(string, string, string, string, boolean, string)'
    uid: azure-devops-extension-api.GitRestClient.getTreeZip
    package: azure-devops-extension-api
    summary: >-
      The Tree endpoint returns the collection of objects underneath the
      specified tree. Trees are folders in a Git repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function getTreeZip(repositoryId: string, sha1: string, project?:
        string, projectId?: string, recursive?: boolean, fileName?: string):
        Promise<ArrayBuffer>
      parameters:
        - id: repositoryId
          type: string
          description: Repository Id.
        - id: sha1
          type: string
          description: SHA1 hash of the tree object.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: Project Id.
        - id: recursive
          type: boolean
          description: >-
            Search recursively. Include trees underneath this tree. Default is
            false.
        - id: fileName
          type: string
          description: |
            Name to use if a .zip file is returned. Default is the object ID.
      return:
        description: ''
        type: Promise&lt;ArrayBuffer&gt;
  - name: 'queryImportRequests(string, string, boolean)'
    uid: azure-devops-extension-api.GitRestClient.queryImportRequests
    package: azure-devops-extension-api
    summary: Retrieve import requests for a repository.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function queryImportRequests(project: string, repositoryId: string,
        includeAbandoned?: boolean): Promise<GitImportRequest[]>
      parameters:
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: includeAbandoned
          type: boolean
          description: |
            True to include abandoned import requests in the results.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitImportRequest"
          />[]&gt;
  - name: >-
      restoreRepositoryFromRecycleBin(GitRecycleBinRepositoryDetails, string,
      string)
    uid: azure-devops-extension-api.GitRestClient.restoreRepositoryFromRecycleBin
    package: azure-devops-extension-api
    summary: >-
      Recover a soft-deleted Git repository. Recently deleted repositories go
      into a soft-delete state for a period of time before they are hard deleted
      and become unrecoverable.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function restoreRepositoryFromRecycleBin(repositoryDetails:
        GitRecycleBinRepositoryDetails, project: string, repositoryId: string):
        Promise<GitRepository>
      parameters:
        - id: repositoryDetails
          type: >-
            <xref
            uid="azure-devops-extension-api.GitRecycleBinRepositoryDetails" />
          description: '-'
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: |
            The ID of the repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRepository" />&gt;
  - name: 'sharePullRequest(ShareNotificationContext, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.sharePullRequest
    package: azure-devops-extension-api
    summary: >-
      Sends an e-mail notification about a specific pull request to a set of
      recipients
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function sharePullRequest(userMessage: ShareNotificationContext,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<void>
      parameters:
        - id: userMessage
          type: <xref uid="azure-devops-extension-api.ShareNotificationContext" />
          description: '-'
        - id: repositoryId
          type: string
          description: ID of the git repository.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'updateComment(Comment, string, number, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updateComment
    package: azure-devops-extension-api
    summary: Update a comment associated with a specific thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateComment(comment: Comment, repositoryId: string,
        pullRequestId: number, threadId: number, commentId: number, project?:
        string): Promise<Comment>
      parameters:
        - id: comment
          type: <xref uid="azure-devops-extension-api.Comment" />
          description: >-
            The comment content that should be updated. Comments can be up to
            150,000 characters.
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread that the desired comment is in.
        - id: commentId
          type: number
          description: ID of the comment to update.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.Comment" />&gt;
  - name: 'updateImportRequest(GitImportRequest, string, string, number)'
    uid: azure-devops-extension-api.GitRestClient.updateImportRequest
    package: azure-devops-extension-api
    summary: Retry or abandon a failed import request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateImportRequest(importRequestToUpdate: GitImportRequest,
        project: string, repositoryId: string, importRequestId: number):
        Promise<GitImportRequest>
      parameters:
        - id: importRequestToUpdate
          type: <xref uid="azure-devops-extension-api.GitImportRequest" />
          description: >-
            The updated version of the import request. Currently, the only
            change allowed is setting the Status to Queued or Abandoned.
        - id: project
          type: string
          description: Project ID or project name
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: importRequestId
          type: number
          description: |
            The unique identifier for the import request to update.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitImportRequest"
          />&gt;
  - name: 'updatePullRequest(GitPullRequest, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequest
    package: azure-devops-extension-api
    summary: Update a pull request
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequest(gitPullRequestToUpdate: GitPullRequest,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<GitPullRequest>
      parameters:
        - id: gitPullRequestToUpdate
          type: <xref uid="azure-devops-extension-api.GitPullRequest" />
          description: The pull request content that should be updated.
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request to update.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitPullRequest"
          />&gt;
  - name: 'updatePullRequestConflict(GitConflict, string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestConflict
    package: azure-devops-extension-api
    summary: Update merge conflict resolution
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestConflict(conflict: GitConflict, repositoryId:
        string, pullRequestId: number, conflictId: number, project?: string):
        Promise<GitConflict>
      parameters:
        - id: conflict
          type: <xref uid="azure-devops-extension-api.GitConflict" />
          description: '-'
        - id: repositoryId
          type: string
          description: '-'
        - id: pullRequestId
          type: number
          description: '-'
        - id: conflictId
          type: number
          description: '-'
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitConflict" />&gt;
  - name: 'updatePullRequestConflicts(GitConflict[], string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestConflicts
    package: azure-devops-extension-api
    summary: Update multiple merge conflict resolutions
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestConflicts(conflictUpdates: GitConflict[],
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<GitConflictUpdateResult[]>
      parameters:
        - id: conflictUpdates
          type: '<xref uid="azure-devops-extension-api.GitConflict" />[]'
          description: '-'
        - id: repositoryId
          type: string
          description: '-'
        - id: pullRequestId
          type: number
          description: '-'
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitConflictUpdateResult" />[]&gt;
  - name: >-
      updatePullRequestIterationStatuses(JsonPatchDocument, string, number,
      number, string)
    uid: >-
      azure-devops-extension-api.GitRestClient.updatePullRequestIterationStatuses
    package: azure-devops-extension-api
    summary: >-
      Update pull request iteration statuses collection. The only supported
      operation type is \`remove\`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestIterationStatuses(patchDocument:
        JsonPatchDocument, repositoryId: string, pullRequestId: number,
        iterationId: number, project?: string): Promise<void>
      parameters:
        - id: patchDocument
          type: <xref uid="azure-devops-extension-api.JsonPatchDocument" />
          description: >-
            Operations to apply to the pull request statuses in JSON Patch
            format.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: iterationId
          type: number
          description: ID of the pull request iteration.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'updatePullRequestProperties(JsonPatchDocument, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestProperties
    package: azure-devops-extension-api
    summary: >-
      Create or update pull request external properties. The patch operation can
      be \`add\`, \`replace\` or \`remove\`. For \`add\` operation, the path can
      be empty. If the path is empty, the value must be a list of key value
      pairs. For \`replace\` operation, the path cannot be empty. If the path
      does not exist, the property will be added to the collection. For
      \`remove\` operation, the path cannot be empty. If the path does not
      exist, no action will be performed.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestProperties(patchDocument: JsonPatchDocument,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<any>
      parameters:
        - id: patchDocument
          type: <xref uid="azure-devops-extension-api.JsonPatchDocument" />
          description: 'Properties to add, replace or remove in JSON Patch format.'
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;any&gt;
  - name: >-
      updatePullRequestReviewer(IdentityRefWithVote, string, number, string,
      string)
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestReviewer
    package: azure-devops-extension-api
    summary: 'Edit a reviewer entry. These fields are patchable: isFlagged'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestReviewer(reviewer: IdentityRefWithVote,
        repositoryId: string, pullRequestId: number, reviewerId: string,
        project?: string): Promise<IdentityRefWithVote>
      parameters:
        - id: reviewer
          type: <xref uid="azure-devops-extension-api.IdentityRefWithVote" />
          description: >-
            Reviewer data.\<br /\>If the reviewer's ID is included here, it must
            match the reviewerID parameter.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: reviewerId
          type: string
          description: ID of the reviewer.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.IdentityRefWithVote"
          />&gt;
  - name: 'updatePullRequestReviewers(IdentityRefWithVote[], string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestReviewers
    package: azure-devops-extension-api
    summary: >-
      Reset the votes of multiple reviewers on a pull request.  NOTE: This
      endpoint only supports updating votes, but does not support updating
      required reviewers (use policy) or display names.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestReviewers(patchVotes: IdentityRefWithVote[],
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<void>
      parameters:
        - id: patchVotes
          type: '<xref uid="azure-devops-extension-api.IdentityRefWithVote" />[]'
          description: IDs of the reviewers whose votes will be reset to zero
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'updatePullRequestStatuses(JsonPatchDocument, string, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updatePullRequestStatuses
    package: azure-devops-extension-api
    summary: >-
      Update pull request statuses collection. The only supported operation type
      is \`remove\`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updatePullRequestStatuses(patchDocument: JsonPatchDocument,
        repositoryId: string, pullRequestId: number, project?: string):
        Promise<void>
      parameters:
        - id: patchDocument
          type: <xref uid="azure-devops-extension-api.JsonPatchDocument" />
          description: >-
            Operations to apply to the pull request statuses in JSON Patch
            format.
        - id: repositoryId
          type: string
          description: The repository ID of the pull requestâ€™s target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: 'updateRef(GitRefUpdate, string, string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.updateRef
    package: azure-devops-extension-api
    summary: Lock or Unlock a branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateRef(newRefInfo: GitRefUpdate, repositoryId: string,
        filter: string, project?: string, projectId?: string): Promise<GitRef>
      parameters:
        - id: newRefInfo
          type: <xref uid="azure-devops-extension-api.GitRefUpdate" />
          description: The ref update action (lock/unlock) to perform
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: filter
          type: string
          description: The name of the branch to lock/unlock
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: >
            ID or name of the team project. Optional if specifying an ID for
            repository.
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRef" />&gt;
  - name: 'updateRefs(GitRefUpdate[], string, string, string)'
    uid: azure-devops-extension-api.GitRestClient.updateRefs
    package: azure-devops-extension-api
    summary: 'Creating, updating, or deleting refs(branches).'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateRefs(refUpdates: GitRefUpdate[], repositoryId: string,
        project?: string, projectId?: string): Promise<GitRefUpdateResult[]>
      parameters:
        - id: refUpdates
          type: '<xref uid="azure-devops-extension-api.GitRefUpdate" />[]'
          description: List of ref updates to attempt to perform
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: Project ID or project name
        - id: projectId
          type: string
          description: >
            ID or name of the team project. Optional if specifying an ID for
            repository.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="azure-devops-extension-api.GitRefUpdateResult"
          />[]&gt;
  - name: 'updateRepository(GitRepository, string, string)'
    uid: azure-devops-extension-api.GitRestClient.updateRepository
    package: azure-devops-extension-api
    summary: >-
      Updates the Git repository with either a new repo name or a new default
      branch.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateRepository(newRepositoryInfo: GitRepository,
        repositoryId: string, project?: string): Promise<GitRepository>
      parameters:
        - id: newRepositoryInfo
          type: <xref uid="azure-devops-extension-api.GitRepository" />
          description: Specify a new repo name or a new default branch of the repository
        - id: repositoryId
          type: string
          description: The name or ID of the repository.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: Promise&lt;<xref uid="azure-devops-extension-api.GitRepository" />&gt;
  - name: 'updateThread(GitPullRequestCommentThread, string, number, number, string)'
    uid: azure-devops-extension-api.GitRestClient.updateThread
    package: azure-devops-extension-api
    summary: Update a thread in a pull request.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function updateThread(commentThread: GitPullRequestCommentThread,
        repositoryId: string, pullRequestId: number, threadId: number, project?:
        string): Promise<GitPullRequestCommentThread>
      parameters:
        - id: commentThread
          type: >-
            <xref uid="azure-devops-extension-api.GitPullRequestCommentThread"
            />
          description: The thread content that should be updated.
        - id: repositoryId
          type: string
          description: The repository ID of the pull request's target branch.
        - id: pullRequestId
          type: number
          description: ID of the pull request.
        - id: threadId
          type: number
          description: ID of the thread to update.
        - id: project
          type: string
          description: |
            Project ID or project name
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="azure-devops-extension-api.GitPullRequestCommentThread" />&gt;
extends: <xref uid="azure-devops-extension-api.RestClientBase" />
